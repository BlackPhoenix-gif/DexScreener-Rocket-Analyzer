from typing import Dict, List, Any
from models import RiskAssessment, RiskLevel, TokenSecurityReport
from config import Config

class RiskScoreCalculator:
    def __init__(self):
        self.config = Config()
        self.weights = {
            'contract_verification': 0.15,
            'ownership_status': 0.20,
            'liquidity_lock': 0.25,
            'holder_distribution': 0.15,
            'trading_patterns': 0.10,
            'code_audit': 0.10,
            'community_reports': 0.05
        }
    
    def calculate_risk_score(self, token_data: TokenSecurityReport) -> RiskAssessment:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞"""
        scores = {}
        
        # Contract verification
        scores['contract_verification'] = self.calculate_verification_score(token_data)
        
        # Ownership status
        scores['ownership_status'] = self.calculate_ownership_score(token_data)
        
        # Liquidity lock
        scores['liquidity_lock'] = self.calculate_liquidity_score(token_data)
        
        # Holder distribution
        scores['holder_distribution'] = self.calculate_distribution_score(token_data)
        
        # Trading patterns
        scores['trading_patterns'] = self.calculate_trading_score(token_data)
        
        # Code audit
        scores['code_audit'] = self.calculate_audit_score(token_data)
        
        # Community reports
        scores['community_reports'] = self.calculate_community_score(token_data)
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        final_score = sum(scores[k] * self.weights[k] for k in scores)
        
        return RiskAssessment(
            overall_score=final_score,
            risk_level=self.get_risk_level(final_score),
            confidence=self.calculate_confidence(scores),
            breakdown=scores,
            recommendations=self.generate_recommendations(scores, token_data)
        )
    
    def calculate_verification_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        if not token_data.contract_analysis.verified:
            return 0.8
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏—Ç–∞
        audit_results = token_data.contract_analysis.audit_results
        if audit_results['critical'] > 0:
            return 0.9
        elif audit_results['high'] > 0:
            return 0.7
        elif audit_results['medium'] > 0:
            return 0.4
        else:
            return 0.1
    
    def calculate_ownership_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        if token_data.ownership.renounced:
            return 0.0
        elif token_data.ownership.owner_type.value == 'TIMELOCK':
            return 0.2
        elif token_data.ownership.owner_type.value == 'MULTISIG':
            return 0.4
        else:
            return 0.9
    
    def calculate_liquidity_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        if token_data.distribution.liquidity_locked:
            if token_data.distribution.liquidity_lock_period and token_data.distribution.liquidity_lock_period > 365:
                return 0.1
            elif token_data.distribution.liquidity_lock_period and token_data.distribution.liquidity_lock_period > 180:
                return 0.3
            else:
                return 0.5
        else:
            return 0.9
    
    def calculate_distribution_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        gini = token_data.distribution.gini_coefficient
        top_10_percent = token_data.distribution.top_10_holders_percent
        
        if gini > 0.8 or top_10_percent > 80:
            return 0.9
        elif gini > 0.6 or top_10_percent > 60:
            return 0.7
        elif gini > 0.4 or top_10_percent > 40:
            return 0.5
        else:
            return 0.2
    
    def calculate_trading_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        wash_score = token_data.trading.wash_trading_score
        organic_ratio = token_data.trading.organic_volume_ratio
        
        if wash_score > 0.7 or organic_ratio < 0.3:
            return 0.9
        elif wash_score > 0.5 or organic_ratio < 0.5:
            return 0.7
        elif wash_score > 0.3 or organic_ratio < 0.7:
            return 0.5
        else:
            return 0.2
    
    def calculate_audit_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –∞—É–¥–∏—Ç–∞ –∫–æ–¥–∞"""
        dangerous_funcs = token_data.contract_analysis.dangerous_functions
        honeypot_prob = token_data.contract_analysis.honeypot_probability
        
        if honeypot_prob > 0.8:
            return 0.9
        elif honeypot_prob > 0.5:
            return 0.7
        elif len(dangerous_funcs) > 5:
            return 0.6
        elif len(dangerous_funcs) > 2:
            return 0.4
        else:
            return 0.1
    
    def calculate_community_score(self, token_data: TokenSecurityReport) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        return 0.3  # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫
    
    def get_risk_level(self, score: float) -> RiskLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        if score >= 0.8:
            return RiskLevel.CRITICAL
        elif score >= 0.6:
            return RiskLevel.HIGH
        elif score >= 0.4:
            return RiskLevel.MEDIUM
        else:
            return RiskLevel.LOW
    
    def calculate_confidence(self, scores: Dict[str, float]) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ü–µ–Ω–∫–µ"""
        # –ß–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
        for score in scores.values():
            if score >= 0:
                confidence += 0.1
        
        return min(confidence, 1.0)
    
    def generate_recommendations(self, scores: Dict[str, float], token_data: TokenSecurityReport) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ö–æ–Ω—Ç—Ä–∞–∫—Ç
        if scores['contract_verification'] > 0.5:
            if not token_data.contract_analysis.verified:
                recommendations.append("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            else:
                recommendations.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
        else:
            recommendations.append("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω")
        
        # –í–ª–∞–¥–µ–ª–µ—Ü
        if scores['ownership_status'] > 0.5:
            if not token_data.ownership.renounced:
                recommendations.append("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω")
            else:
                recommendations.append("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü")
        else:
            recommendations.append("‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –±–µ–∑–æ–ø–∞—Å–µ–Ω")
        
        # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        if scores['liquidity_lock'] > 0.5:
            if not token_data.distribution.liquidity_locked:
                recommendations.append("‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                recommendations.append("‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
        else:
            recommendations.append("‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if scores['holder_distribution'] > 0.5:
            recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —É –∫—Ä—É–ø–Ω—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π")
        else:
            recommendations.append("‚úÖ –•–æ—Ä–æ—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
        
        # Honeypot
        if token_data.contract_analysis.honeypot_probability > 0.5:
            recommendations.append("üö® –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å honeypot")
        else:
            recommendations.append("‚úÖ –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ honeypot")
        
        return recommendations
