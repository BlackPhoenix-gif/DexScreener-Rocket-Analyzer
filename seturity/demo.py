import asyncio
import json
from token_analyzer import TokenAnalyzer

async def demo_single_token():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    analyzer = TokenAnalyzer()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
    test_tokens = [
        "0xdAC17F958D2ee523a2206206994597C13D831ec7",  # USDT
        "0xA0b86a33E6441b8c4C8C1C1B9C9C9C9C9C9C9C9C",  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    ]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    test_tokens = list(set(test_tokens))
    
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –¢–û–ö–ï–ù–û–í")
    print("=" * 60)
    
    for i, token_address in enumerate(test_tokens, 1):
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ {i}: {token_address}")
        print("-" * 40)
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞
            report = await analyzer.analyze_token(token_address)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"üéØ –û–±—â–∏–π —Ä–∏—Å–∫: {report.risk_assessment.risk_level.value}")
            print(f"üìà –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {report.risk_assessment.overall_score:.2f}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {report.risk_assessment.confidence:.2f}")
            
            print(f"\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in report.risk_assessment.recommendations:
                print(f"  {rec}")
            
            print(f"\nüîß –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if report.contract_analysis.verified else '‚ùå'}")
            print(f"  ‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if report.ownership.renounced else '‚ùå'}")
            print(f"  ‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if report.distribution.liquidity_locked else '‚ùå'}")
            print(f"  ‚Ä¢ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∫–∏—Ç–æ–≤: {report.distribution.whale_concentration.value}")
            print(f"  ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å honeypot: {report.contract_analysis.honeypot_probability:.2f}")
            
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {report.analysis_duration:.2f}—Å")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        print("\n" + "=" * 60)

async def demo_batch_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = TokenAnalyzer()
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞)
    tokens = [
        "0xdAC17F958D2ee523a2206206994597C13D831ec7",  # USDT
        "0xA0b86a33E6441b8c4C8C1C1B9C9C9C9C9C9C9C9C",  # –¢–µ—Å—Ç–æ–≤—ã–π 1
        "0xB1b86a33E6441b8c4C8C1C1B9C9C9C9C9C9C9C9C",  # –¢–µ—Å—Ç–æ–≤—ã–π 2
    ]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    tokens = list(set(tokens))
    
    print("\nüöÄ –ü–ê–ö–ï–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–û–í")
    print("=" * 60)
    
    try:
        reports = await analyzer.analyze_batch(tokens)
        
        print(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(reports)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        risk_counts = {}
        total_time = 0
        
        for report in reports:
            risk_level = report.risk_assessment.risk_level.value
            risk_counts[risk_level] = risk_counts.get(risk_level, 0) + 1
            total_time += report.analysis_duration
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤:")
        for risk, count in risk_counts.items():
            percentage = (count / len(reports)) * 100
            print(f"  {risk}: {count} —Ç–æ–∫–µ–Ω–æ–≤ ({percentage:.1f}%)")
        
        print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {total_time:.2f}—Å")
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–æ–∫–µ–Ω: {total_time/len(reports):.2f}—Å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîê SETURITY - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    print("=" * 70)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    await demo_single_token()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    await demo_batch_analysis()
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("   1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ JSON —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ –ø–∞–ø–∫—É results/")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    print("   3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results/security_analysis_results.json")

if __name__ == "__main__":
    asyncio.run(main())
