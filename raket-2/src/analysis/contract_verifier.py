import asyncio
import aiohttp
import time
import json
from typing import Dict, Optional, List, Any
from dataclasses import dataclass
import logging
from tqdm.asyncio import tqdm
from ..config import GOPLUS_BATCH_SIZE, GOPLUS_CONCURRENCY, GOPLUS_RATE_LIMIT, ETHERSCAN_RATE_LIMIT, BSCSCAN_RATE_LIMIT, RPC_CONCURRENCY

logger = logging.getLogger(__name__)

@dataclass
class ContractVerificationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    is_verified: bool = False
    is_honeypot: bool = False
    buy_tax: str = "0"
    sell_tax: str = "0"
    owner_address: str = ""
    can_take_back_ownership: bool = False
    is_open_source: bool = False
    has_mint_function: bool = False
    has_blacklist: bool = False
    is_proxy: bool = False
    verification_source: str = ""
    error_message: str = ""
    raw_data: Dict = None

class ContractVerifier:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GoPlus Security, –ø—É–±–ª–∏—á–Ω—ã–µ RPC –∏ Etherscan/BscScan
    """
    
    def __init__(self):
        self.session = None
        self.cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å
        
        # –°–µ–º–∞—Ñ–æ—Ä—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        self.goplus_semaphore = asyncio.Semaphore(GOPLUS_CONCURRENCY)
        self.etherscan_semaphore = asyncio.Semaphore(1)  # –û—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        self.bscscan_semaphore = asyncio.Semaphore(1)    # –û—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        self.rpc_semaphore = asyncio.Semaphore(RPC_CONCURRENCY)
        
        # Rate limiting
        self.request_delays = {
            'goplus': 60.0 / GOPLUS_RATE_LIMIT,      # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            'etherscan': 60.0 / ETHERSCAN_RATE_LIMIT, # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            'bscscan': 60.0 / BSCSCAN_RATE_LIMIT,     # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            'rpc': 0.1                               # 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫—É–Ω–¥—É
        }
        self.last_request_time = {}
        self.request_counters = {
            'goplus': 0,
            'etherscan': 0,
            'bscscan': 0,
            'rpc': 0
        }
        self.counter_reset_time = time.time()
        
        # Chain ID mapping –¥–ª—è GoPlus
        self.chain_id_mapping = {
            'ethereum': 1,
            'bsc': 56,
            'polygon': 137,
            'arbitrum': 42161,
            'avalanche': 43114,
            'fantom': 250,
            'optimism': 10,
            'base': 8453,
            'linea': 59144,
            'cronos': 25,
            'solana': None,  # Solana –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π API endpoint
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ GoPlus
            'ton': None,
            'sonic': None
        }
        
        logger.info("[CONTRACT_VERIFIER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=30),
            headers={'User-Agent': 'Raket-Scanner/1.0'}
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def verify_contracts_batch(self, contracts: List[tuple], show_progress: bool = True) -> Dict[str, ContractVerificationResult]:
        """
        Batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        """
        if not contracts:
            return {}
        
        logger.info(f"[CONTRACT_VERIFIER] –ù–∞—á–∞–ª–æ batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {len(contracts)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ —Å–µ—Ç–∏ –¥–ª—è batch-–∑–∞–ø—Ä–æ—Å–æ–≤
        contracts_by_chain = {}
        for contract_address, chain in contracts:
            if chain not in contracts_by_chain:
                contracts_by_chain[chain] = []
            contracts_by_chain[chain].append(contract_address)
        
        results = {}
        total_batches = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ batch'–µ–π
        for chain, addresses in contracts_by_chain.items():
            batches_count = len([addresses[i:i + GOPLUS_BATCH_SIZE] for i in range(0, len(addresses), GOPLUS_BATCH_SIZE)])
            total_batches += batches_count
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = None
        if show_progress:
            progress_bar = tqdm(
                total=total_batches,
                desc="üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
                unit="batch",
                ncols=100,
                bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]"
            )
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            for chain, addresses in contracts_by_chain.items():
                logger.info(f"[CONTRACT_VERIFIER] –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(addresses)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Å–µ—Ç–∏ {chain}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ batch'–∏ –¥–ª—è GoPlus
                batches = [addresses[i:i + GOPLUS_BATCH_SIZE] for i in range(0, len(addresses), GOPLUS_BATCH_SIZE)]
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è batch-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                tasks = []
                for batch in batches:
                    task = self._process_batch_with_progress(batch, chain, progress_bar)
                    tasks.append(task)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º batch-–∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                batch_results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for batch_result in batch_results:
                    if isinstance(batch_result, dict):
                        results.update(batch_result)
        finally:
            if progress_bar:
                progress_bar.close()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        verified_count = sum(1 for result in results.values() if result.is_verified)
        honeypot_count = sum(1 for result in results.values() if result.is_honeypot)
        
        stats = {
            'total_contracts_checked': len(results),
            'verified_contracts': verified_count,
            'honeypot_contracts': honeypot_count,
            'verification_rate': (verified_count / len(results) * 100) if results else 0,
            'cache_size': len(self.cache)
        }
        
        logger.info(f"[CONTRACT_VERIFIER] Batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        return results
    
    async def _process_batch_with_progress(self, addresses: List[str], chain: str, progress_bar) -> Dict[str, ContractVerificationResult]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ batch'–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        try:
            result = await self._process_batch_goplus(addresses, chain)
            if progress_bar:
                progress_bar.update(1)
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º batch'–µ
                verified_count = sum(1 for r in result.values() if r.is_verified)
                honeypot_count = sum(1 for r in result.values() if r.is_honeypot)
                progress_bar.set_postfix({
                    '—Å–µ—Ç—å': chain[:6],
                    '–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ': verified_count,
                    'honeypot': honeypot_count
                })
            return result
        except Exception as e:
            if progress_bar:
                progress_bar.update(1)
                progress_bar.set_postfix({'–æ—à–∏–±–∫–∞': str(e)[:20]})
            logger.error(f"[CONTRACT_VERIFIER] –û—à–∏–±–∫–∞ –≤ batch {chain}: {str(e)}")
            return {}
    
    async def _process_batch_goplus(self, addresses: List[str], chain: str) -> Dict[str, ContractVerificationResult]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ batch'–∞ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ GoPlus API"""
        async with self.goplus_semaphore:
            await self._respect_rate_limit('goplus')
            
            chain_id = self.chain_id_mapping.get(chain)
            if chain_id is None:
                logger.debug(f"[CONTRACT_VERIFIER] GoPlus –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ç—å {chain}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._process_batch_fallback(addresses, chain)
            
            url = f"https://api.gopluslabs.io/api/v1/token_security/{chain_id}"
            params = {'contract_addresses': ','.join(addresses)}
            
            try:
                async with self.session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        results = {}
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ GoPlus
                        if data.get('code') == 1 and 'result' in data and data['result']:
                            goplus_result = data['result']
                            
                            for address in addresses:
                                if address.lower() in goplus_result:
                                    token_info = goplus_result[address.lower()]
                                    
                                    result = ContractVerificationResult()
                                    result.is_honeypot = token_info.get('is_honeypot', '0') == '1'
                                    result.is_verified = token_info.get('is_open_source', '0') == '1'
                                    result.buy_tax = token_info.get('buy_tax', '0') or '0'
                                    result.sell_tax = token_info.get('sell_tax', '0') or '0'
                                    result.owner_address = token_info.get('creator_address', '') or token_info.get('owner_address', '')
                                    result.can_take_back_ownership = token_info.get('can_take_back_ownership', '0') == '1'
                                    result.has_mint_function = token_info.get('is_mintable', '0') == '1'
                                    result.has_blacklist = token_info.get('is_blacklisted', '0') == '1'
                                    result.is_proxy = token_info.get('is_proxy', '0') == '1'
                                    result.verification_source = "GoPlus Security"
                                    result.raw_data = token_info
                                    
                                    results[address] = result
                                    
                                    # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                    cache_key = f"{chain}_{address.lower()}"
                                    self.cache[cache_key] = (time.time(), result)
                                    
                                    logger.info(f"[CONTRACT_VERIFIER] ‚úÖ GoPlus: {address[:10]}... honeypot={result.is_honeypot}, verified={result.is_verified}, tax={result.buy_tax}/{result.sell_tax}, owner={result.owner_address[:10] if result.owner_address else 'None'}...")
                                else:
                                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                                    result = ContractVerificationResult()
                                    result.verification_source = "GoPlus Security (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
                                    results[address] = result
                                    logger.info(f"[CONTRACT_VERIFIER] ‚ö†Ô∏è  GoPlus: —Ç–æ–∫–µ–Ω {address[:10]}... –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            logger.warning(f"[CONTRACT_VERIFIER] GoPlus –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: code={data.get('code')}, message={data.get('message')}")
                            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
                            for address in addresses:
                                result = ContractVerificationResult()
                                result.verification_source = "GoPlus Security (–æ—à–∏–±–∫–∞ API)"
                                results[address] = result
                        
                        logger.info(f"[CONTRACT_VERIFIER] GoPlus batch: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑ {len(addresses)} —Ç–æ–∫–µ–Ω–æ–≤")
                        return results
                    else:
                        logger.warning(f"[CONTRACT_VERIFIER] GoPlus API –æ—à–∏–±–∫–∞: {response.status}")
                        return {}
                        
            except Exception as e:
                logger.error(f"[CONTRACT_VERIFIER] GoPlus batch API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
                return {}
    
    async def _process_batch_fallback(self, addresses: List[str], chain: str) -> Dict[str, ContractVerificationResult]:
        """Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö GoPlus —Å–µ—Ç–µ–π"""
        results = {}
        
        for address in addresses:
            result = ContractVerificationResult()
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
            if chain == 'solana':
                # –î–ª—è Solana –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                solana_result = await self._check_solana_token_basic(address)
                if solana_result:
                    result = solana_result
                    result.verification_source = "Solana Token Registry"
                else:
                    result.verification_source = "Solana (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
            elif chain == 'ton':
                # –î–ª—è TON —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result.is_verified = True  # –°—á–∏—Ç–∞–µ–º –≤—Å–µ TON —Ç–æ–∫–µ–Ω—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                result.verification_source = "TON Network"
            elif chain == 'sonic':
                # –î–ª—è Sonic —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result.is_verified = True  # –°—á–∏—Ç–∞–µ–º –≤—Å–µ Sonic —Ç–æ–∫–µ–Ω—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                result.verification_source = "Sonic Network"
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ API
                fallback_result = await self._check_fallback_sources(address, chain)
                if fallback_result:
                    result = fallback_result
                else:
                    result.verification_source = f"{chain} (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"
            
            results[address] = result
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache_key = f"{chain}_{address.lower()}"
            self.cache[cache_key] = (time.time(), result)
        
        logger.info(f"[CONTRACT_VERIFIER] Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ {chain}: {len(results)} —Ç–æ–∫–µ–Ω–æ–≤")
        return results
    
    async def _check_solana_goplus(self, token_address: str) -> Optional[ContractVerificationResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Solana —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ GoPlus Solana API"""
        try:
            url = "https://api.gopluslabs.io/api/v1/solana_token_security"
            params = {'contract_addresses': token_address}
            
            await self._respect_rate_limit('goplus')
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('code') == 1 and 'result' in data and data['result']:
                        if token_address in data['result'] and data['result'][token_address]:
                            token_info = data['result'][token_address]
                            
                            result = ContractVerificationResult()
                            result.is_honeypot = token_info.get('is_honeypot', '0') == '1'
                            result.is_verified = True  # Solana —Ç–æ–∫–µ–Ω—ã —Å—á–∏—Ç–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                            result.buy_tax = token_info.get('buy_tax', '0')
                            result.sell_tax = token_info.get('sell_tax', '0')
                            result.owner_address = token_info.get('creator_address', '')
                            result.has_mint_function = token_info.get('is_mintable', '0') == '1'
                            result.has_blacklist = token_info.get('is_blacklisted', '0') == '1'
                            result.is_proxy = False  # Solana –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç proxy –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                            result.verification_source = "GoPlus Solana Security"
                            result.raw_data = token_info
                            
                            logger.info(f"[CONTRACT_VERIFIER] GoPlus Solana {token_address}: honeypot={result.is_honeypot}, "
                                       f"tax={result.buy_tax}/{result.sell_tax}, mint={result.has_mint_function}")
                            
                            return result
                    else:
                        logger.debug(f"[CONTRACT_VERIFIER] GoPlus Solana: —Ç–æ–∫–µ–Ω {token_address} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return None
                else:
                    logger.warning(f"[CONTRACT_VERIFIER] GoPlus Solana API –æ—à–∏–±–∫–∞: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"[CONTRACT_VERIFIER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GoPlus Solana: {str(e)}")
            return None

    async def _check_solana_token_basic(self, token_address: str) -> Optional[ContractVerificationResult]:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Solana —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API"""
        await self._respect_rate_limit('rpc')
        
        # –ü—Ä–æ–±—É–µ–º Jupiter API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
        try:
            url = f"https://token.jup.ag/strict"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–∫–µ
                    for token in data:
                        if token.get('address') == token_address:
                            result = ContractVerificationResult()
                            result.is_verified = True
                            result.verification_source = "Jupiter Token List"
                            result.raw_data = token
                            
                            logger.info(f"[CONTRACT_VERIFIER] Solana —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ Jupiter: {token.get('symbol', 'Unknown')}")
                            return result
        except Exception as e:
            logger.debug(f"[CONTRACT_VERIFIER] Jupiter API –æ—à–∏–±–∫–∞: {str(e)}")
        
        # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Solana RPC
        return await self._check_solana_contract(token_address)
    
    async def verify_contract_multi_source(self, contract_address: str, chain: str) -> ContractVerificationResult:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"{chain}_{contract_address.lower()}"
        if cache_key in self.cache:
            cached_time, cached_result = self.cache[cache_key]
            if time.time() - cached_time < self.cache_ttl:
                logger.debug(f"[CONTRACT_VERIFIER] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {contract_address}")
                return cached_result
        
        result = ContractVerificationResult()
        
        try:
            # 1. GoPlus Security API (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
            goplus_result = await self._check_goplus_security(contract_address, chain)
            if goplus_result:
                result = goplus_result
                result.verification_source = "GoPlus Security"
            
            # 2. Fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ç–µ–π
            if not result.is_verified or chain in ['ethereum', 'bsc']:
                fallback_result = await self._check_fallback_sources(contract_address, chain)
                if fallback_result:
                    result.is_verified = result.is_verified or fallback_result.is_verified
                    if not result.verification_source:
                        result.verification_source = fallback_result.verification_source
            
            # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Solana
            if chain == 'solana':
                solana_result = await self._check_solana_contract(contract_address)
                if solana_result:
                    result.is_verified = solana_result.is_verified
                    result.verification_source = "Solana RPC"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {contract_address}: {str(e)}"
            logger.error(f"[CONTRACT_VERIFIER] {error_msg}")
            result.error_message = error_msg
        
        # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.cache[cache_key] = (time.time(), result)
        
        return result
    
    async def _check_goplus_security(self, contract_address: str, chain: str) -> Optional[ContractVerificationResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GoPlus Security API"""
        chain_id = self.chain_id_mapping.get(chain)
        if chain_id is None:
            logger.debug(f"[CONTRACT_VERIFIER] GoPlus –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ç—å {chain}")
            return None
        
        await self._respect_rate_limit('goplus')
        
        url = f"https://api.gopluslabs.io/api/v1/token_security/{chain_id}"
        params = {'contract_addresses': contract_address}
        
        try:
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('code') == 1 and 'result' in data and data['result'] and contract_address.lower() in data['result']:
                        token_info = data['result'][contract_address.lower()]
                        
                        result = ContractVerificationResult()
                        result.is_honeypot = token_info.get('is_honeypot', '0') == '1'
                        result.is_verified = token_info.get('is_open_source', '0') == '1'
                        result.buy_tax = token_info.get('buy_tax', '0') or '0'
                        result.sell_tax = token_info.get('sell_tax', '0') or '0'
                        result.owner_address = token_info.get('creator_address', '') or token_info.get('owner_address', '')
                        result.can_take_back_ownership = token_info.get('can_take_back_ownership', '0') == '1'
                        result.has_mint_function = token_info.get('is_mintable', '0') == '1'
                        result.has_blacklist = token_info.get('is_blacklisted', '0') == '1'
                        result.is_proxy = token_info.get('is_proxy', '0') == '1'
                        result.raw_data = token_info
                        
                        logger.info(f"[CONTRACT_VERIFIER] GoPlus: honeypot={result.is_honeypot}, "
                                   f"tax={result.buy_tax}/{result.sell_tax}, owner={result.owner_address[:10]}...")
                        
                        return result
                    else:
                        logger.warning(f"[CONTRACT_VERIFIER] GoPlus: —Ç–æ–∫–µ–Ω {contract_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ API –æ—à–∏–±–∫–∞")
                else:
                    logger.warning(f"[CONTRACT_VERIFIER] GoPlus API –æ—à–∏–±–∫–∞: {response.status}")
                    
        except Exception as e:
            logger.error(f"[CONTRACT_VERIFIER] GoPlus API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        return None
    
    async def _check_fallback_sources(self, contract_address: str, chain: str) -> Optional[ContractVerificationResult]:
        """Fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è Ethereum –∏ BSC"""
        if chain == 'ethereum':
            return await self._check_etherscan_public(contract_address)
        elif chain == 'bsc':
            return await self._check_bscscan_public(contract_address)
        
        return None
    
    async def _check_etherscan_public(self, contract_address: str) -> Optional[ContractVerificationResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π Etherscan API"""
        await self._respect_rate_limit('etherscan')
        
        url = "https://api.etherscan.io/api"
        params = {
            'module': 'contract',
            'action': 'getsourcecode',
            'address': contract_address
        }
        
        try:
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('status') == '1' and data.get('result'):
                        contract_info = data['result'][0]
                        
                        result = ContractVerificationResult()
                        result.is_verified = contract_info.get('SourceCode', '').strip() != ''
                        result.owner_address = contract_info.get('ContractCreator', '')
                        result.raw_data = contract_info
                        
                        logger.info(f"[CONTRACT_VERIFIER] Etherscan: –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω={result.is_verified}")
                        return result
                        
        except Exception as e:
            logger.error(f"[CONTRACT_VERIFIER] Etherscan API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        return None
    
    async def _check_bscscan_public(self, contract_address: str) -> Optional[ContractVerificationResult]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π BscScan API"""
        await self._respect_rate_limit('bscscan')
        
        url = "https://api.bscscan.com/api"
        params = {
            'module': 'contract',
            'action': 'getsourcecode',
            'address': contract_address
        }
        
        try:
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('status') == '1' and data.get('result'):
                        contract_info = data['result'][0]
                        
                        result = ContractVerificationResult()
                        result.is_verified = contract_info.get('SourceCode', '').strip() != ''
                        result.owner_address = contract_info.get('ContractCreator', '')
                        result.raw_data = contract_info
                        
                        logger.info(f"[CONTRACT_VERIFIER] BscScan: –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω={result.is_verified}")
                        return result
                        
        except Exception as e:
            logger.error(f"[CONTRACT_VERIFIER] BscScan API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        return None
    
    async def _check_solana_contract(self, contract_address: str) -> Optional[ContractVerificationResult]:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        await self._respect_rate_limit('rpc')
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ RPC endpoints
        rpc_endpoints = [
            "https://api.mainnet-beta.solana.com",
            "https://solana-api.projectserum.com",
            "https://rpc.ankr.com/solana"
        ]
        
        for endpoint in rpc_endpoints:
            try:
                payload = {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "getAccountInfo",
                    "params": [contract_address, {"encoding": "base64"}]
                }
                
                async with self.session.post(endpoint, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if 'result' in data and data['result']:
                            result = ContractVerificationResult()
                            result.is_verified = True  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
                            result.raw_data = data
                            
                            logger.info(f"[CONTRACT_VERIFIER] Solana RPC ({endpoint}): –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω")
                            return result
                            
            except Exception as e:
                logger.warning(f"[CONTRACT_VERIFIER] Solana RPC {endpoint} –æ—à–∏–±–∫–∞: {str(e)}")
                continue
        
        return None
    
    async def _respect_rate_limit(self, api_type: str):
        """–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
        current_time = time.time()
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if current_time - self.counter_reset_time > 60:
            self.request_counters = {k: 0 for k in self.request_counters}
            self.counter_reset_time = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if api_type == 'goplus' and self.request_counters[api_type] >= GOPLUS_RATE_LIMIT:
            wait_time = 60 - (current_time - self.counter_reset_time)
            if wait_time > 0:
                logger.debug(f"[CONTRACT_VERIFIER] Rate limit –¥–ª—è {api_type}, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å")
                await asyncio.sleep(wait_time)
                self.request_counters[api_type] = 0
                self.counter_reset_time = time.time()
        
        # –û–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if api_type in self.last_request_time:
            delay_needed = self.request_delays[api_type]
            time_since_last = current_time - self.last_request_time[api_type]
            
            if time_since_last < delay_needed:
                sleep_time = delay_needed - time_since_last
                logger.debug(f"[CONTRACT_VERIFIER] –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f}—Å –¥–ª—è {api_type}")
                await asyncio.sleep(sleep_time)
        
        self.last_request_time[api_type] = current_time
        self.request_counters[api_type] += 1
    
    def get_verification_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        total_requests = len(self.cache)
        verified_count = sum(1 for _, (_, result) in self.cache.items() if result.is_verified)
        honeypot_count = sum(1 for _, (_, result) in self.cache.items() if result.is_honeypot)
        
        return {
            'total_contracts_checked': total_requests,
            'verified_contracts': verified_count,
            'honeypot_contracts': honeypot_count,
            'verification_rate': (verified_count / total_requests * 100) if total_requests > 0 else 0,
            'cache_size': len(self.cache)
        }
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        self.cache.clear()
        logger.info("[CONTRACT_VERIFIER] –ö–µ—à –æ—á–∏—â–µ–Ω")
