import json
import logging
import os
import asyncio
import sys
from datetime import datetime
import importlib.util
from typing import Dict, List, Optional, Union
import pandas as pd
from tqdm import tqdm
from colorama import init, Fore, Style

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ raket-2 –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ LiquidityLockChecker
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'raket-2'))
try:
    from src.analysis.liquidity_lock_checker import LiquidityLockChecker
except ImportError:
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å LiquidityLockChecker. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    LiquidityLockChecker = None

# –ò–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –æ–∫—Ä—É–∂–µ–Ω–∏—é)
SECURITY_ANALYZER_AVAILABLE = False
SecurityAnalyzer = None
try:
    from .analysis.security_analyzer import SecurityAnalyzer as _SA
    SecurityAnalyzer = _SA
    SECURITY_ANALYZER_AVAILABLE = True
except Exception as _e1:
    try:
        # Fallback: –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ sys.path
        sys.path.append(os.path.join(os.path.dirname(__file__), 'analysis'))
        from security_analyzer import SecurityAnalyzer as _SA2
        SecurityAnalyzer = _SA2
        SECURITY_ANALYZER_AVAILABLE = True
    except Exception as _e2:
        try:
            # Fallback 2: –∏–º–ø–æ—Ä—Ç –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            analysis_dir = os.path.join(os.path.dirname(__file__), 'analysis')
            sa_path = os.path.join(analysis_dir, 'security_analyzer.py')
            spec = importlib.util.spec_from_file_location('security_analyzer', sa_path)
            if spec and spec.loader:
                sa_module = importlib.util.module_from_spec(spec)
                sys.modules['security_analyzer'] = sa_module
                spec.loader.exec_module(sa_module)
                SecurityAnalyzer = getattr(sa_module, 'SecurityAnalyzer', None)
                SECURITY_ANALYZER_AVAILABLE = SecurityAnalyzer is not None
        except Exception as _e3:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SecurityAnalyzer. –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
            SECURITY_ANALYZER_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

def format_tax_percentage(tax_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
    if not tax_value or tax_value == '' or tax_value == '0':
        return '0'
    try:
        tax_float = float(tax_value)
        if tax_float == 0:
            return '0'
        elif tax_float < 1:
            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 1, —Ç–æ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥—Ä–æ–±—å - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            return f"{tax_float * 100:.0f}"
        else:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1, —Ç–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            return f"{tax_float:.0f}"
    except (ValueError, TypeError):
        return str(tax_value) if tax_value else '0'

class Token:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""
    def __init__(self, data: Dict):
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
        base_token = data.get('baseToken', {})
        self.address = base_token.get('address', '')
        self.name = base_token.get('name', '')
        self.symbol = base_token.get('symbol', '')
        self.network = data.get('chainId', '')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ
        self.pair_address = data.get('pairAddress', '')
        self.dex_id = data.get('dexId', '')
        self.url = data.get('url', '')
        
        # –¶–µ–Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.price_usd = float(data.get('priceUsd', 0))
        self.price_native = float(data.get('priceNative', 0))
        
        # –û–±—ä–µ–º—ã –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        liquidity = data.get('liquidity', {})
        self.liquidity_usd = float(liquidity.get('usd', 0))
        
        volume = data.get('volume', {})
        self.volume_24h = float(volume.get('h24', 0))
        self.volume_6h = float(volume.get('h6', 0))
        self.volume_1h = float(volume.get('h1', 0))
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_change = data.get('priceChange', {})
        self.price_change_24h = float(price_change.get('h24', 0))
        self.price_change_6h = float(price_change.get('h6', 0))
        self.price_change_1h = float(price_change.get('h1', 0))
        
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        txns = data.get('txns', {}).get('h24', {})
        self.buys_24h = int(txns.get('buys', 0))
        self.sells_24h = int(txns.get('sells', 0))
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.fdv = float(data.get('fdv', 0))
        self.market_cap = float(data.get('marketCap', 0))
        
        # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = data.get('pairCreatedAt', 0)
        self.age_hours = (datetime.now().timestamp() * 1000 - created_at) / (3600 * 1000) if created_at else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info = data.get('info', {})
        
        # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        self.risk_score = 0
        self.risk_level = "–ù–∏–∑–∫–∏–π"
        self.risk_factors = []
        
        # –ü–æ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_report = None
        self.security_score = 0.0
        self.security_issues = []
        self.contract_verified = False
        self.ownership_renounced = False
        self.liquidity_locked = False
        self.liquidity_lock_period = None
        self.honeypot_probability = 0.0
        
    def calculate_risk_score(self, config: Dict) -> int:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–∞ —Å –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏"""
        score = 0
        score_breakdown = []  # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        risk_thresholds = config.get('risk_thresholds', {})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        if self.price_change_24h > config.get('price_change_thresholds', {}).get('suspicious', {}).get('min', 1000):
            score += 30
            self.risk_factors.append(f"–ê–Ω–æ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã: {self.price_change_24h:.2f}%")
        
        # üö® –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç–æ–∫–µ–Ω–∞ - –º–æ–ª–æ–¥—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        if self.age_hours < 24:
            score += 50  # –ö—Ä–∏—Ç–∏—á–Ω—ã–π —à—Ç—Ä–∞—Ñ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –º–ª–∞–¥—à–µ 24—á
            self.risk_factors.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω (<24—á): {self.age_hours:.2f} —á–∞—Å–æ–≤")
        elif self.age_hours < 168:  # –ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏
            score += 20
            self.risk_factors.append(f"–ú–æ–ª–æ–¥–æ–π —Ç–æ–∫–µ–Ω (<7 –¥–Ω–µ–π): {self.age_hours:.2f} —á–∞—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        if self.liquidity_usd < config.get('liquidity_thresholds', {}).get('high_risk', 1000):
            score += 15
            self.risk_factors.append(f"–ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${self.liquidity_usd:.2f}")
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        vol_liq_ratio = self.volume_24h / self.liquidity_usd if self.liquidity_usd > 0 else 0
        if vol_liq_ratio > config.get('volume_liquidity_ratios', {}).get('suspicious', {}).get('min', 5):
            score += 25
            self.risk_factors.append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {vol_liq_ratio:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∞–π—Ç–∞ –∏ —Å–æ—Ü—Å–µ—Ç–µ–π
        has_website = bool(self.info.get("websites", []))
        has_socials = bool(self.info.get("socials", []))
        if not has_website and not has_socials:
            score += 20
            self.risk_factors.append("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∞–π—Ç–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        total_txns = self.buys_24h + self.sells_24h
        if total_txns > 0:
            sell_ratio = self.sells_24h / total_txns
            if sell_ratio > 0.8:  # –ï—Å–ª–∏ –±–æ–ª–µ–µ 80% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø—Ä–æ–¥–∞–∂–∏
                score += 25
                self.risk_factors.append(f"–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂: {sell_ratio*100:.1f}%")
        
        # üö® –ö–†–ò–¢–ò–ß–ù–û: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –±–µ–∑ –Ω–µ–µ –∞–≤—Ç–æ–º–∞—Ç–æ–º +2 —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if hasattr(self, 'liquidity_lock_score') and self.liquidity_lock_score is not None:
            if self.liquidity_lock_score == 0:
                score += 60  # –ö—Ä–∏—Ç–∏—á–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                self.risk_factors.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ rug pull!")
            elif self.liquidity_lock_score < 30:
                score += 40  # –£—Å–∏–ª–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–ª–æ—Ö—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                self.risk_factors.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {self.liquidity_lock_score}/100")
            elif self.liquidity_lock_score < 60:
                score += 20  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ
                self.risk_factors.append(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {self.liquidity_lock_score}/100")
        else:
            # –°–ú–Ø–ì–ß–ï–ù–û: –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö/–∑—Ä–µ–ª—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–Ω—å—à–∏–π —à—Ç—Ä–∞—Ñ
            has_high_liquidity = self.liquidity_usd >= 100000
            has_mature_age = self.age_hours >= 720  # 30+ –¥–Ω–µ–π
            
            if has_high_liquidity and has_mature_age:
                score += 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                self.risk_factors.append("–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω (–Ω–æ —Ç–æ–∫–µ–Ω –∫—Ä—É–ø–Ω—ã–π/–∑—Ä–µ–ª—ã–π)")
            else:
                score += 20  # –û–±—ã—á–Ω—ã–π —à—Ç—Ä–∞—Ñ
                self.risk_factors.append("–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        
        # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–ò–õ–¨–¢–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquidity_lock_percentage = 0
        if hasattr(self, 'liquidity_lock_info') and self.liquidity_lock_info and self.liquidity_lock_info.is_locked:
            liquidity_lock_percentage = self.liquidity_lock_info.locked_percentage
        
        # 2. üìä –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ê–ö–¢–û–†: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–≤–µ—Å: –≤—ã—Å–æ–∫–∏–π)
        volume_ratio = self.volume_24h / self.liquidity_usd if self.liquidity_usd > 0 else 0
        if volume_ratio > 20:
            penalty = 25  # –ö—Ä–∞—Å–Ω—ã–π —Ñ–ª–∞–≥ - –≤–æ–∑–º–æ–∂–Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è
            score += penalty
            score_breakdown.append(f"V/L>20: +{penalty}")
            self.risk_factors.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è")
        elif volume_ratio > 5:
            penalty = 10  # –ñ–µ–ª—Ç—ã–π —Ñ–ª–∞–≥ - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            score += penalty
            score_breakdown.append(f"V/L>5: +{penalty}")
            self.risk_factors.append("–í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        
        # 3. ‚ö†Ô∏è –í–ê–ñ–ù–´–ô –§–ê–ö–¢–û–†: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–≤–µ—Å: –≤—ã—Å–æ–∫–∏–π)
        if self.price_change_24h > 500:
            penalty = 30
            score += penalty
            score_breakdown.append(f"–†–æ—Å—Ç>500%: +{penalty}")
            self.risk_factors.append("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç >500% - –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –ø–∞–º–ø-—Å—Ö–µ–º—É")
        
        # üö® –£–ñ–ï–°–¢–û–ß–ï–ù–ù–´–ï –ü–û–†–û–ì–ò –†–ò–°–ö–ê —Å —É—á–µ—Ç–æ–º –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤
        if score >= 120:  # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–º–æ–ª–æ–¥–æ—Å—Ç—å + –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ = 110+ –±–∞–ª–ª–æ–≤)
            self.risk_level = "–°–∫–∞–º"
        elif score >= 80:   # –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            self.risk_level = "–í—ã—Å–æ–∫–∏–π"
        elif score >= 50:   # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            self.risk_level = "–°—Ä–µ–¥–Ω–∏–π"
        elif score >= 25:   # –ù–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            self.risk_level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
        else:
            # üö® –£–ñ–ï–°–¢–û–ß–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" - —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π)
            if self.liquidity_usd < 100000:  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ $100K
                self.risk_level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
                self.risk_factors.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞ (<$100K)")
            # üö® –ö–†–ò–¢–ò–ß–ù–û: –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ù–ï –º–æ–∂–µ—Ç –±—ã—Ç—å "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"!
            elif liquidity_lock_percentage == 0:
                is_verified = False
                if hasattr(self, 'verification_result') and self.verification_result:
                    is_verified = self.verification_result.is_verified
                
                if not is_verified:
                    self.risk_level = "–°—Ä–µ–¥–Ω–∏–π"  # –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ = —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
                    self.risk_factors.append("–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                else:
                    # –î–∞–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ = –º–∞–∫—Å–∏–º—É–º —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫
                    self.risk_level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
                    self.risk_factors.append("–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - —Ä–∏—Å–∫ rug pull –¥–∞–∂–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (30%+) —Å —Ö–æ—Ä–æ—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
            elif liquidity_lock_percentage >= 30 and self.liquidity_usd >= 100000:
                self.risk_level = "–ù–∏–∑–∫–∏–π"
            # –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (75%+) = –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            elif liquidity_lock_percentage >= 75:
                self.risk_level = "–ù–∏–∑–∫–∏–π"
            else:
                self.risk_level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
        if self.risk_level == "–°—Ä–µ–¥–Ω–∏–π":
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å $50K –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
            if self.liquidity_usd < 50000:
                self.risk_level = "–í—ã—Å–æ–∫–∏–π"
                self.risk_factors.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞ (<$50K)")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        if self.risk_level == "–í—ã—Å–æ–∫–∏–π":
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å $25K –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            if self.liquidity_usd < 25000:
                self.risk_level = "–°–∫–∞–º"
                self.risk_factors.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (<$25K)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self.score_breakdown = score_breakdown
        self.risk_score = score
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        if score_breakdown:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Ç–∞–∫ –∫–∞–∫ logger –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–µ—Ç–æ–¥–µ Token
            print(f"[RISK_SCORE] {self.symbol}: –ò—Ç–æ–≥–æ {score} –±–∞–ª–ª–æ–≤. –†–∞–∑–±–∏–≤–∫–∞: {', '.join(score_breakdown)}")
        
        return score
    
    def get_explorer_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–∞"""
        explorers = {
            'solana': f'https://solscan.io/token/{self.address}',
            'ethereum': f'https://etherscan.io/token/{self.address}',
            'bsc': f'https://bscscan.com/token/{self.address}',
            'arbitrum': f'https://arbiscan.io/token/{self.address}',
            'polygon': f'https://polygonscan.com/token/{self.address}'
        }
        return explorers.get(self.network.lower(), f'https://dexscreener.com/{self.network}/{self.address}')
    
    def get_dex_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –Ω–∞ DEX –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ç–æ–∫–µ–Ω–æ–º"""
        dex_urls = {
            'solana': f'https://jup.ag/swap/SOL-{self.address}',
            'ethereum': f'https://app.uniswap.org/#/swap?outputCurrency={self.address}',
            'bsc': f'https://pancakeswap.finance/swap?outputCurrency={self.address}',
            'arbitrum': f'https://app.uniswap.org/#/swap?outputCurrency={self.address}',
            'polygon': f'https://quickswap.exchange/#/swap?outputCurrency={self.address}',
            'zksync': f'https://syncswap.xyz/swap?outputCurrency={self.address}',
            'pulsechain': f'https://app.pulsex.com/swap?outputCurrency={self.address}'
        }
        return dex_urls.get(self.network.lower(), f'https://dexscreener.com/{self.network}/{self.address}')
    
    def get_dexscreener_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –Ω–∞ DexScreener –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        return f'https://dexscreener.com/{self.network.lower()}/{self.address}'
    
    def format_age(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        hours = self.age_hours
        
        years = int(hours / (24 * 365))
        hours = hours % (24 * 365)
        
        months = int(hours / (24 * 30))
        hours = hours % (24 * 30)
        
        weeks = int(hours / (24 * 7))
        hours = hours % (24 * 7)
        
        days = int(hours / 24)
        hours = int(hours % 24)
        
        parts = []
        if years > 0:
            parts.append(f"{years}–≥")
        if months > 0:
            parts.append(f"{months}–º")
        if weeks > 0:
            parts.append(f"{weeks}–Ω")
        if days > 0:
            parts.append(f"{days}–¥")
        if hours > 0 and len(parts) == 0:
            parts.append(f"{hours}—á")
            
        return " ".join(parts)
    
    def format_money(self, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if amount >= 1_000_000_000:  # –º–∏–ª–ª–∏–∞—Ä–¥—ã
            return f"${amount / 1_000_000_000:.2f}B"
        elif amount >= 1_000_000:  # –º–∏–ª–ª–∏–æ–Ω—ã
            return f"${amount / 1_000_000:.2f}M"
        elif amount >= 1_000:  # —Ç—ã—Å—è—á–∏
            return f"${amount / 1_000:.2f}K"
        else:
            return f"${amount:.2f}"
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        base_dict = {
            'address': self.address,
            'name': self.name,
            'symbol': self.symbol,
            'network': self.network,
            'pair_address': self.pair_address,
            'dex_id': self.dex_id,
            'url': self.url,
            'price_usd': self.price_usd,
            'price_native': self.price_native,
            'liquidity_usd': self.liquidity_usd,
            'volume_24h': self.volume_24h,
            'volume_6h': self.volume_6h,
            'volume_1h': self.volume_1h,
            'price_change_24h': self.price_change_24h,
            'price_change_6h': self.price_change_6h,
            'price_change_1h': self.price_change_1h,
            'buys_24h': self.buys_24h,
            'sells_24h': self.sells_24h,
            'fdv': self.fdv,
            'market_cap': self.market_cap,
            'age_hours': self.age_hours,
            'risk_score': self.risk_score,
            'risk_level': self.risk_level,
            'risk_factors': self.risk_factors,
            'info': self.info
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if hasattr(self, 'security_score'):
            base_dict.update({
                'security_score': self.security_score,
                'security_issues': self.security_issues,
                'contract_verified': self.contract_verified,
                'ownership_renounced': self.ownership_renounced,
                'liquidity_locked': self.liquidity_locked,
                'honeypot_probability': self.honeypot_probability
            })
        
        return base_dict

class TokenAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    def __init__(self, config_path: str = 'config.json'):
        self.tokens: List[Token] = []
        self.filtered_tokens: List[Token] = []
        self.scam_tokens: List[Token] = []
        self.high_risk_tokens: List[Token] = []
        self.medium_risk_tokens: List[Token] = []
        self.low_risk_tokens: List[Token] = []
        self.config = self._load_config(config_path)
        self.logger = self._setup_logger()
        self.contract_verifier = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_analyzer = None
        if SECURITY_ANALYZER_AVAILABLE and self.config.get('security_analysis', {}).get('enabled', False):
            try:
                self.security_analyzer = SecurityAnalyzer(self.config)
                self.logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
                self.security_analyzer = None
    
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}{Style.RESET_ALL}")
            return {}
    
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger("token_analyzer")
        logger.setLevel(logging.DEBUG)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs('logs', exist_ok=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s')
        console_handler.setFormatter(console_formatter)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_handler = logging.FileHandler(f"logs/analysis_{timestamp}.log")
        file_handler.setLevel(logging.DEBUG)
        file_formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] [%(module)s] %(message)s')
        file_handler.setFormatter(file_formatter)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫ –ª–æ–≥–≥–µ—Ä—É
        logger.addHandler(console_handler)
        logger.addHandler(file_handler)
        
        return logger
    
    def load_from_json(self, file_path: str) -> int:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
        self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            if 'rockets' in data:
                tokens_data = data['rockets']
                self.tokens = []
                for token_data in tqdm(tokens_data, desc="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"):
                    token = Token(token_data)
                    self.tokens.append(token)
                
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
                return len(self.tokens)
            else:
                error_msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'rockets'"
                self.logger.error(error_msg)
                raise ValueError(error_msg)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
            self.logger.error(error_msg)
            raise Exception(error_msg)
    
    async def verify_contracts(self, tokens: List[Token]) -> None:
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API —Å batch-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        if not tokens:
            return
        
        self.logger.info(f"[VERIFICATION] –ù–∞—á–∞–ª–æ batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {len(tokens)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.contract_verifier is None:
            try:
                import sys
                import os
                sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'raket-2'))
                from src.analysis.contract_verifier import ContractVerifier
                self.contract_verifier = ContractVerifier()
            except ImportError:
                self.logger.warning("[VERIFICATION] –ú–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
                return
        
        async with self.contract_verifier as verifier:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch-–∑–∞–ø—Ä–æ—Å–æ–≤
            contracts_data = [(token.address, token.network) for token in tokens]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            verification_results = await verifier.verify_contracts_batch(contracts_data, show_progress=True)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ —Ç–æ–∫–µ–Ω–∞–º
            honeypot_count = 0
            verified_count = 0
            suspicious_count = 0
            
            for token in tokens:
                if token.address in verification_results:
                    verification_result = verification_results[token.address]
                    token.verification_result = verification_result
                    
                    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    if verification_result.is_verified:
                        verified_count += 1
                    if verification_result.is_honeypot:
                        honeypot_count += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if verification_result.is_honeypot:
                        token.risk_factors.append("Honeypot —Ç–æ–∫–µ–Ω")
                        token.risk_score += 50
                        self.logger.warning(f"üö® HONEYPOT –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {token.symbol} ({token.address[:20]}...)")
                    
                    if not verification_result.is_verified:
                        # –°–ú–Ø–ì–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö/–∑—Ä–µ–ª—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                        has_high_liquidity = token.liquidity_usd >= 100000  # $100K+
                        has_mature_age = token.age_hours >= 720  # 30+ –¥–Ω–µ–π
                        has_social_presence = bool(token.info.get("websites", [])) or bool(token.info.get("socials", []))
                        
                        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –º–µ–Ω—å—à–∏–π —à—Ç—Ä–∞—Ñ
                        if has_high_liquidity and (has_mature_age or has_social_presence):
                            token.risk_factors.append("–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–Ω–æ –∫—Ä—É–ø–Ω—ã–π/–∑—Ä–µ–ª—ã–π)")
                            token.risk_score += 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ
                        else:
                            token.risk_factors.append("–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
                            token.risk_score += 15  # –û–±—ã—á–Ω—ã–π —à—Ç—Ä–∞—Ñ
                    
                    if verification_result.can_take_back_ownership:
                        token.risk_factors.append("–í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∞–≤–∞")
                        token.risk_score += 20
                        suspicious_count += 1
                    
                    if verification_result.has_mint_function:
                        token.risk_factors.append("–ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è mint")
                        token.risk_score += 10
                        suspicious_count += 1
                    
                    if verification_result.has_blacklist:
                        token.risk_factors.append("–ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è blacklist")
                        token.risk_score += 15
                        suspicious_count += 1
                    
                    if verification_result.is_proxy:
                        token.risk_factors.append("Proxy –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
                        token.risk_score += 10
                        suspicious_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
                    if token.risk_score >= 80:
                        token.risk_level = "–°–∫–∞–º"
                    elif token.risk_score >= 60:
                        token.risk_level = "–í—ã—Å–æ–∫–∏–π"
                    elif token.risk_score >= 40:
                        token.risk_level = "–°—Ä–µ–¥–Ω–∏–π"
                    else:
                        token.risk_level = "–ù–∏–∑–∫–∏–π"
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    try:
                        import sys
                        import os
                        sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'raket-2'))
                        from src.analysis.contract_verifier import ContractVerificationResult
                        token.verification_result = ContractVerificationResult()
                        token.verification_result.error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"
                    except ImportError:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
                        class SimpleVerificationResult:
                            def __init__(self):
                                self.is_verified = False
                                self.is_honeypot = False
                                self.error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"
                        token.verification_result = SimpleVerificationResult()
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.logger.info(f"[VERIFICATION] Batch –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            self.logger.info(f"[VERIFICATION] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            self.logger.info(f"[VERIFICATION]   üîç –í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(tokens)}")
            self.logger.info(f"[VERIFICATION]   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {verified_count}")
            self.logger.info(f"[VERIFICATION]   üçØ Honeypot –Ω–∞–π–¥–µ–Ω–æ: {honeypot_count}")
            self.logger.info(f"[VERIFICATION]   ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {suspicious_count}")
            
            if honeypot_count > 0:
                self.logger.warning(f"[VERIFICATION] üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {honeypot_count} honeypot —Ç–æ–∫–µ–Ω–æ–≤!")
            else:
                self.logger.info(f"[VERIFICATION] ‚úÖ Honeypot —Ç–æ–∫–µ–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    async def check_liquidity_locks(self, tokens: List['Token']):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        if LiquidityLockChecker is None:
            self.logger.warning("[LIQUIDITY_LOCK] LiquidityLockChecker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            for token in tokens:
                token.liquidity_lock_info = None
                token.liquidity_lock_score = 0
            return
            
        self.logger.info(f"[LIQUIDITY_LOCK] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
        
        async with LiquidityLockChecker() as lock_checker:
            checked_count = 0
            locked_count = 0
            
            for token in tqdm(tokens, desc="üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"):
                try:
                    if token.pair_address and token.address and token.network:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                        lock_info = await lock_checker.check_liquidity_lock(
                            token.address, 
                            token.pair_address, 
                            token.network
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                        token.liquidity_lock_info = lock_info
                        token.liquidity_lock_score = lock_checker.get_lock_score(lock_info)
                        # –í–ê–ñ–ù–û: –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–ª–µ–µ –≤ SecurityAnalyzer
                        token.liquidity_locked = bool(lock_info.is_locked)
                        token.liquidity_lock_period = lock_info.lock_duration_days if lock_info.lock_duration_days else None
                        
                        checked_count += 1
                        if lock_info.is_locked:
                            locked_count += 1
                            
                        self.logger.debug(f"[LIQUIDITY_LOCK] {token.symbol}: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞={lock_info.is_locked}, –æ—Ü–µ–Ω–∫–∞={token.liquidity_lock_score}/100")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        token.liquidity_lock_info = None
                        token.liquidity_lock_score = 0
                        token.liquidity_locked = False
                        token.liquidity_lock_period = None
                        self.logger.debug(f"[LIQUIDITY_LOCK] {token.symbol}: –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç pair_address –∏–ª–∏ address)")
                        
                except Exception as e:
                    self.logger.error(f"[LIQUIDITY_LOCK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {token.symbol}: {str(e)}")
                    token.liquidity_lock_info = None
                    token.liquidity_lock_score = 0
                    token.liquidity_locked = False
                    token.liquidity_lock_period = None
                    
        self.logger.info(f"[LIQUIDITY_LOCK] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.logger.info(f"[LIQUIDITY_LOCK]   üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {checked_count}")
        self.logger.info(f"[LIQUIDITY_LOCK]   üîí –° –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é: {locked_count}")
        self.logger.info(f"[LIQUIDITY_LOCK]   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö): {len(tokens) - checked_count}")
    
    async def analyze_security(self, tokens: List[Token]):
        """–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        if not self.security_analyzer:
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã - –∏—Å–∫–ª—é—á–∞–µ–º —Å–∫–∞–º
        tokens_to_analyze = [token for token in tokens if token.risk_level != "–°–∫–∞–º"]
        
        self.logger.info(f"[SECURITY] –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {len(tokens_to_analyze)} —Ç–æ–∫–µ–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞—è {len(tokens) - len(tokens_to_analyze)} —Å–∫–∞–º-—Ç–æ–∫–µ–Ω–æ–≤)")
        
        analyzed_count = 0
        security_issues_count = 0
        
        for token in tqdm(tokens_to_analyze, desc="–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"):
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                token_data = {
                    'address': token.address,
                    'name': token.name,
                    'symbol': token.symbol,
                    'chainId': token.network,
                    'volume_24h': token.volume_24h,
                    'price_change_24h': token.price_change_24h,
                    'buys_24h': token.buys_24h,
                    'sells_24h': token.sells_24h,
                    'market_cap': token.market_cap,
                    'liquidity_locked': getattr(token, 'liquidity_locked', False),
                    'liquidity_lock_period': getattr(token, 'liquidity_lock_period', None),
                    'total_holders': getattr(token, 'total_holders', 0),
                    'top_10_percent': getattr(token, 'top_10_percent', 0.0)
                }
                
                # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_report = await self.security_analyzer.analyze_token_security(token_data)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ç–æ–∫–µ–Ω–∞
                token.security_report = security_report
                token.security_score = security_report.risk_assessment.overall_score
                token.contract_verified = security_report.contract_analysis.verified
                token.ownership_renounced = security_report.ownership.renounced
                token.liquidity_locked = security_report.distribution.liquidity_locked
                token.honeypot_probability = security_report.contract_analysis.honeypot_probability
                
                # –°–±–æ—Ä –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_issues = []
                if security_report.contract_analysis.security_issues:
                    security_issues.extend(security_report.contract_analysis.security_issues)
                if security_report.ownership.security_issues:
                    security_issues.extend(security_report.ownership.security_issues)
                if security_report.distribution.security_issues:
                    security_issues.extend(security_report.distribution.security_issues)
                if security_report.trading.security_issues:
                    security_issues.extend(security_report.trading.security_issues)
                
                token.security_issues = security_issues
                
                if security_issues:
                    security_issues_count += 1
                
                analyzed_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                await asyncio.sleep(0.1)
                
            except Exception as e:
                self.logger.error(f"[SECURITY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {token.symbol}: {str(e)}")
                token.security_score = 1.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                token.security_issues = [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"]
        
        self.logger.info(f"[SECURITY] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        self.logger.info(f"[SECURITY]   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {analyzed_count}")
        self.logger.info(f"[SECURITY]   ‚ö†Ô∏è –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_issues_count}")
        self.logger.info(f"[SECURITY]   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—à–∏–±–∫–∏): {len(tokens) - analyzed_count}")
    
    async def analyze_all_tokens(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞"""
        self.logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –°–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        self.logger.info("[ANALYSIS] –≠—Ç–∞–ø 1: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
        await self.verify_contracts(self.tokens)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        self.logger.info("[ANALYSIS] –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
        await self.check_liquidity_locks(self.tokens)
        
        # –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if self.security_analyzer:
            self.logger.info("[ANALYSIS] –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            await self.analyze_security(self.tokens)
        
        # –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏
        self.logger.info("[ANALYSIS] –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
        self.scam_tokens = []
        self.high_risk_tokens = []
        self.medium_risk_tokens = []
        self.low_risk_tokens = []
        
        for token in tqdm(self.tokens, desc="–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤"):
            risk_score = token.calculate_risk_score(self.config)
            
            if token.risk_level == "–°–∫–∞–º":
                self.scam_tokens.append(token)
            elif token.risk_level == "–í—ã—Å–æ–∫–∏–π":
                self.high_risk_tokens.append(token)
            elif token.risk_level == "–°—Ä–µ–¥–Ω–∏–π":
                self.medium_risk_tokens.append(token)
            else:
                self.low_risk_tokens.append(token)
        
        self.logger.info(f"[ANALYSIS] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–∞–º: {len(self.scam_tokens)}, –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {len(self.high_risk_tokens)}, –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {len(self.medium_risk_tokens)}, –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {len(self.low_risk_tokens)}")
    
    def analyze_all_tokens_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        self.logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
        
        self.scam_tokens = []
        self.high_risk_tokens = []
        self.medium_risk_tokens = []
        self.low_risk_tokens = []
        
        for token in tqdm(self.tokens, desc="–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤"):
            risk_score = token.calculate_risk_score(self.config)
            
            if token.risk_level == "–°–∫–∞–º":
                self.scam_tokens.append(token)
            elif token.risk_level == "–í—ã—Å–æ–∫–∏–π":
                self.high_risk_tokens.append(token)
            elif token.risk_level == "–°—Ä–µ–¥–Ω–∏–π":
                self.medium_risk_tokens.append(token)
            else:
                self.low_risk_tokens.append(token)
        
        self.logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–∞–º: {len(self.scam_tokens)}, –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {len(self.high_risk_tokens)}, –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {len(self.medium_risk_tokens)}, –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {len(self.low_risk_tokens)}")
    
    def filter_tokens(self, filters: Optional[Dict] = None) -> List[Token]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        if filters is None:
            filters = {}
        
        self.logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–ø–∏—Å–∫—É —Ç–æ–∫–µ–Ω–æ–≤")
        
        self.filtered_tokens = []
        filter_criteria = []
        
        for token in tqdm(self.tokens, desc="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤"):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞–º-—Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if filters.get('exclude_scam', self.config.get('exclude_scam', True)) and token.risk_level == "–°–∫–∞–º":
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            if filters.get('min_age') is not None and token.age_hours < filters['min_age']:
                continue
            if filters.get('max_age') is not None and token.age_hours > filters['max_age']:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã
            if filters.get('min_price_change') is not None and token.price_change_24h < filters['min_price_change']:
                continue
            if filters.get('max_price_change') is not None and token.price_change_24h > filters['max_price_change']:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            if filters.get('min_liquidity') is not None and token.liquidity_usd < filters['min_liquidity']:
                continue
            if filters.get('max_liquidity') is not None and token.liquidity_usd > filters['max_liquidity']:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–µ—Ç–∏
            if filters.get('networks') is not None and token.network.lower() not in [net.lower() for net in filters['networks']]:
                continue
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
            self.filtered_tokens.append(token)
        
        self.logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(self.filtered_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
        return self.filtered_tokens
    
    def export_to_csv(self, file_path: str, tokens_list: Optional[List[Token]] = None) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ CSV-—Ñ–∞–π–ª"""
        if tokens_list is None:
            tokens_list = self.filtered_tokens if self.filtered_tokens else self.tokens
        
        self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç {len(tokens_list)} —Ç–æ–∫–µ–Ω–æ–≤ –≤ CSV: {file_path}")
        try:
            df = pd.DataFrame([token.to_dict() for token in tokens_list])
            df.to_csv(file_path, index=False, encoding='utf-8')
            self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {str(e)}"
            self.logger.error(error_msg)
            raise Exception(error_msg)
    
    def generate_text_report(self, file_path: str, tokens_list: Optional[List[Token]] = None, detailed: bool = True, report_title: str = "–ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–û–í") -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º"""
        if tokens_list is None:
            tokens_list = self.filtered_tokens if self.filtered_tokens else self.tokens
        
        report_type = "–î–µ—Ç–∞–ª—å–Ω—ã–π" if detailed else "–ö—Ä–∞—Ç–∫–∏–π"
        self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {report_type.lower()} —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {file_path}")
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
                f.write("=" * 80 + "\n")
                f.write(" " * 30 + "–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –¢–û–ö–ï–ù–û–í" + " " * 30 + "\n")
                f.write("=" * 80 + "\n\n")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                f.write("–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n")
                f.write("-" * 80 + "\n")
                f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}\n")
                f.write(f"–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens_list)}\n\n")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
                f.write("-" * 80 + "\n")
                
                # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞
                risk_levels = {"–°–∫–∞–º": 0, "–í—ã—Å–æ–∫–∏–π": 0, "–°—Ä–µ–¥–Ω–∏–π": 0, "–£–º–µ—Ä–µ–Ω–Ω—ã–π": 0, "–ù–∏–∑–∫–∏–π": 0}
                networks = {}
                
                for token in tokens_list:
                    risk_levels[token.risk_level] = risk_levels.get(token.risk_level, 0) + 1
                    networks[token.network] = networks.get(token.network, 0) + 1
                
                f.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞:\n")
                f.write("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n")
                f.write("‚îÇ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞  ‚îÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ‚îÇ –ü—Ä–æ—Ü–µ–Ω—Ç  ‚îÇ\n")
                f.write("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n")
                for level, count in risk_levels.items():
                    percentage = (count / len(tokens_list)) * 100 if tokens_list else 0
                    f.write(f"‚îÇ {level:14} ‚îÇ {count:8} ‚îÇ {percentage:7.1f}% ‚îÇ\n")
                f.write("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n")
                
                f.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç—è–º:\n")
                f.write("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n")
                f.write("‚îÇ –°–µ—Ç—å           ‚îÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ‚îÇ –ü—Ä–æ—Ü–µ–Ω—Ç  ‚îÇ\n")
                f.write("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n")
                for network, count in sorted(networks.items()):
                    percentage = (count / len(tokens_list)) * 100 if tokens_list else 0
                    f.write(f"‚îÇ {network:14} ‚îÇ {count:8} ‚îÇ {percentage:7.1f}% ‚îÇ\n")
                f.write("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n")
                
                # –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞
                for risk_level in ["–°–∫–∞–º", "–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ù–∏–∑–∫–∏–π"]:
                    level_tokens = [t for t in tokens_list if t.risk_level == risk_level]
                    if not level_tokens:
                        continue
                    
                    f.write(f"–¢–û–ö–ï–ù–´ –° –£–†–û–í–ù–ï–ú –†–ò–°–ö–ê: {risk_level.upper()}\n")
                    f.write("-" * 80 + "\n")
                    f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(level_tokens)}\n\n")
                    
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
                    level_tokens.sort(key=lambda x: x.risk_score, reverse=True)
                    
                    for i, token in enumerate(level_tokens, 1):
                        f.write(f"{i}. {token.symbol} ({token.network})\n")
                        f.write("   " + "-" * 40 + "\n")
                        f.write(f"   –†–æ—Å—Ç: 1—á: {token.price_change_1h:.2f}%, 6—á: {token.price_change_6h:.2f}%, 24—á: {token.price_change_24h:.2f}%\n")
                        f.write(f"   –†–∏—Å–∫: {token.risk_level}\n")
                        f.write(f"   –í–æ–∑—Ä–∞—Å—Ç: {token.format_age()}\n")
                        f.write(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (24—á): {token.price_change_24h:.2f}%\n")
                        f.write(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {token.format_money(token.liquidity_usd)}\n")
                        f.write(f"   –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {token.format_money(token.volume_24h)}\n")
                        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫)
                        volume_liquidity_ratio_short = token.volume_24h / token.liquidity_usd if token.liquidity_usd > 0 else 0
                        f.write(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {volume_liquidity_ratio_short:.2f}\n")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        if hasattr(token, 'security_score'):
                            f.write(f"   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {token.security_score:.3f}\n")
                            if hasattr(token, 'contract_verified'):
                                f.write(f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if token.contract_verified else '‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n")
                            if hasattr(token, 'ownership_renounced'):
                                f.write(f"   –í–ª–∞–¥–µ–ª–µ—Ü: {'‚úÖ –†–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω' if token.ownership_renounced else '‚ùå –ù–µ —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω'}\n")
                            if hasattr(token, 'liquidity_locked'):
                                f.write(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' if token.liquidity_locked else '‚ùå –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'}\n")
                                # –î–µ—Ç–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞/—Å—Ä–æ–∫), –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                                if hasattr(token, 'liquidity_lock_info') and token.liquidity_lock_info:
                                    lock_info = token.liquidity_lock_info
                                    if getattr(lock_info, 'is_locked', False):
                                        unlock_str = ''
                                        try:
                                            if getattr(lock_info, 'unlock_date', None):
                                                # unlock_date –º–æ–∂–µ—Ç –±—ã—Ç—å datetime
                                                unlock_str = f", –¥–æ {lock_info.unlock_date.strftime('%Y-%m-%d')}"
                                        except Exception:
                                            pass
                                        f.write(
                                            f"   üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {lock_info.locked_percentage:.1f}% –Ω–∞ {lock_info.lock_duration_days} –¥–Ω–µ–π ({lock_info.platform}{unlock_str})\n"
                                        )
                            if hasattr(token, 'honeypot_probability'):
                                f.write(f"   Honeypot: {token.honeypot_probability:.1%}\n")

                            # –ù–∞–ª–æ–≥–∏ buy/sell –∏–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                            if hasattr(token, 'verification_result') and token.verification_result:
                                buy_tax_formatted = format_tax_percentage(token.verification_result.buy_tax)
                                sell_tax_formatted = format_tax_percentage(token.verification_result.sell_tax)
                                if buy_tax_formatted != "0" or sell_tax_formatted != "0":
                                    f.write(f"   –ù–∞–ª–æ–≥–∏: {buy_tax_formatted}% –ø–æ–∫—É–ø–∫–∞ / {sell_tax_formatted}% –ø—Ä–æ–¥–∞–∂–∞\n")
                            
                            # –°–∏–≥–Ω–∞–ª—ã DEXScreener (–µ—Å–ª–∏ –µ—Å—Ç—å)
                            try:
                                external_checks = getattr(token, 'security_report', {}).external_checks if hasattr(token, 'security_report') and token.security_report else {}
                            except Exception:
                                external_checks = {}
                            ds = (external_checks or {}).get('dexscreener') or {}
                            if ds:
                                f.write(f"   üîç DEXScreener:\n")
                                if ds.get('pair_url'):
                                    f.write(f"      ‚Ä¢ –ü–∞—Ä–∞: {ds['pair_url']}\n")
                                metrics = ds.get('metrics', {}) or {}
                                warnings = ds.get('warnings', []) or []
                                if metrics:
                                    liq = metrics.get('liquidity_usd')
                                    vol = metrics.get('volume_24h')
                                    ch24 = metrics.get('price_change_h24')
                                    ageh = metrics.get('age_hours')
                                    ratio = metrics.get('vol_liq_ratio')
                                    if liq is not None:
                                        f.write(f"      ‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${float(liq):,.0f}\n")
                                    if vol is not None:
                                        f.write(f"      ‚Ä¢ –û–±—ä–µ–º 24—á: ${float(vol):,.0f}\n")
                                    if ch24 is not None:
                                        f.write(f"      ‚Ä¢ –ò–∑–º. —Ü–µ–Ω—ã 24—á: {float(ch24):+.2f}%\n")
                                    if ageh is not None:
                                        f.write(f"      ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç –ø—É–ª–∞: {float(ageh):.1f} —á\n")
                                    if ratio is not None:
                                        f.write(f"      ‚Ä¢ –û–±—ä–µ–º/–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {float(ratio):.2f}\n")
                                if warnings:
                                    for w in warnings[:5]:
                                        f.write(f"      ‚Ä¢ ‚ö†Ô∏è {w}\n")
                        
                        # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º (–≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫)
                        holders = token.info.get("holders", {}) if hasattr(token, 'info') else {}
                        if holders:
                            total_holders = holders.get('total')
                            top = holders.get('top', []) or []
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
                            top10_percent = getattr(token, 'top_10_percent', None)
                            if top10_percent is None:
                                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏–∑ top[]
                                accum = 0.0
                                for h in top[:10]:
                                    try:
                                        accum += float(h.get('percentage', 0) or 0)
                                    except (TypeError, ValueError):
                                        continue
                                top10_percent = accum
                            if total_holders is not None:
                                f.write(f"   –î–µ—Ä–∂–∞—Ç–µ–ª–∏: –≤—Å–µ–≥–æ {total_holders} | –¢–æ–ø-10: {float(top10_percent):.1f}%\n")
                            else:
                                f.write(f"   –¢–æ–ø-10 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {float(top10_percent):.1f}%\n")

                        if detailed:
                            volume_liquidity_ratio = token.volume_24h / token.liquidity_usd if token.liquidity_usd > 0 else 0
                            f.write(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {volume_liquidity_ratio:.2f}\n")
                            
                            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
                            if hasattr(token, 'verification_result') and token.verification_result:
                                vr = token.verification_result
                                f.write(f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if vr.is_verified else '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n")
                                f.write(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {vr.verification_source}\n")
                                if vr.is_honeypot:
                                    f.write(f"   ‚ö†Ô∏è HONEYPOT: –î–ê\n")
                                buy_tax_formatted = format_tax_percentage(vr.buy_tax)
                                sell_tax_formatted = format_tax_percentage(vr.sell_tax)
                                if buy_tax_formatted != "0" or sell_tax_formatted != "0":
                                    f.write(f"   –ù–∞–ª–æ–≥–∏: {buy_tax_formatted}% –ø–æ–∫—É–ø–∫–∞ / {sell_tax_formatted}% –ø—Ä–æ–¥–∞–∂–∞\n")
                            else:
                                contract_info = token.info.get("contract", {})
                                f.write(f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if contract_info.get('verified') else '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n")
                            
                            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ä–∂–∞—Ç–µ–ª—è—Ö
                            holders = token.info.get("holders", {})
                            if holders:
                                f.write(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {holders.get('total', '–ù/–î')}\n")
                                top_holders = holders.get("top", [])
                                if top_holders:
                                    f.write("   –¢–æ–ø-5 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π:\n")
                                    for j, holder in enumerate(top_holders[:5], 1):
                                        f.write(f"    {j}. {holder.get('address', '–ù/–î')}: {holder.get('percentage', 0):.2f}%\n")
                            
                            # –°–∞–π—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                            websites = token.info.get("websites", [])
                            socials = token.info.get("socials", [])
                            
                            if websites:
                                f.write(f"   –°–∞–π—Ç—ã:\n")
                                for website in websites:
                                    if isinstance(website, dict):
                                        url = website.get('url', '')
                                        f.write(f"    - {url}\n")
                                    else:
                                        f.write(f"    - {website}\n")
                            else:
                                f.write("   –°–∞–π—Ç—ã: –ù–µ—Ç\n")
                                
                            if socials:
                                f.write(f"   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n")
                                for social in socials:
                                    if isinstance(social, dict):
                                        url = social.get('url', '')
                                        f.write(f"    - {url}\n")
                                    else:
                                        f.write(f"    - {social}\n")
                            else:
                                f.write("   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: –ù–µ—Ç\n")
                            
                            if token.risk_factors:
                                f.write("   –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:\n")
                                for factor in token.risk_factors:
                                    f.write(f"    - {factor}\n")
                            
                            f.write("   –°—Å—ã–ª–∫–∏:\n")
                            f.write(f"    - DEX: {token.get_dex_url()}\n")
                            f.write(f"    - Explorer: {token.get_explorer_url()}\n")
                            f.write(f"    - DexScreener: {token.get_dexscreener_url()}\n")
                            f.write("\n")
                        
                        f.write("\n")
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
                f.write(f"{report_title}\n")
                f.write("-" * 80 + "\n")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                # (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ get_top_tokens_by_growth)
                recommended = tokens_list
                
                if recommended:
                    recommended.sort(key=lambda x: x.price_change_24h, reverse=True)
                    for i, token in enumerate(recommended, 1):
                        f.write(f"{i}. {token.symbol} ({token.network})\n")
                        f.write("   " + "-" * 40 + "\n")
                        f.write(f"   –†–æ—Å—Ç: 1—á: {token.price_change_1h:.2f}%, 6—á: {token.price_change_6h:.2f}%, 24—á: {token.price_change_24h:.2f}%\n")
                        f.write(f"   –†–∏—Å–∫: {token.risk_level}\n")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–Ω–∞–º–∏–∫–∏
                        trend_1h = token.price_change_1h
                        trend_6h = token.price_change_6h
                        trend_24h = token.price_change_24h
                        
                        recommendation = ""
                        if trend_1h > 0 and trend_1h > trend_6h:
                            recommendation = "üöÄ –ê–ö–¢–ò–í–ù–´–ô –†–û–°–¢ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"
                        elif trend_1h < 0 and trend_6h < 0:
                            recommendation = "üìâ –ö–û–†–†–ï–ö–¶–ò–Ø - –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"
                        elif trend_1h > 0 and trend_6h > 0 and trend_24h > 0:
                            recommendation = "üìà –£–°–¢–û–ô–ß–ò–í–´–ô –†–û–°–¢ - —Ö–æ—Ä–æ—à–∞—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"
                        elif trend_1h < 0 and trend_6h > 0:
                            recommendation = "‚ö° –û–¢–ö–ê–¢ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫"
                        elif abs(trend_1h) < 2 and abs(trend_6h) < 5:
                            recommendation = "‚è∏Ô∏è –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"
                        elif trend_24h > 100 and trend_1h < 0:
                            recommendation = "‚ö†Ô∏è –ü–ï–†–ï–ö–£–ü–õ–ï–ù - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"
                        else:
                            recommendation = "üìä –°–ú–ï–®–ê–ù–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"
                            
                        f.write(f"   {recommendation}\n")
                        
                        f.write(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {token.format_money(token.liquidity_usd)}, –û–±—ä–µ–º: {token.format_money(token.volume_24h)}\n")
                        
                        # –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                        if hasattr(token, 'liquidity_lock_info') and token.liquidity_lock_info:
                            lock_info = token.liquidity_lock_info
                            if lock_info.is_locked:
                                f.write(f"   üîí –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {lock_info.locked_percentage}% –Ω–∞ {lock_info.lock_duration_days} –¥–Ω–µ–π ({lock_info.platform})\n")
                                
                                # –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                                lock_score = getattr(token, 'liquidity_lock_score', 0)
                                if lock_score >= 80:
                                    f.write(f"   üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –í–´–°–û–ö–ê–Ø ({lock_score}/100)\n")
                                elif lock_score >= 50:
                                    f.write(f"   üü° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –°–†–ï–î–ù–Ø–Ø ({lock_score}/100)\n")
                                else:
                                    f.write(f"   üî¥ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –ù–ò–ó–ö–ê–Ø ({lock_score}/100)\n")
                            else:
                                f.write(f"   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ rug pull!\n")
                        else:
                            f.write(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        f.write("\n   –ü–û–ß–ï–ú–£ –ú–´ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú:\n")
                        
                        # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                        if token.liquidity_usd > 1000000:
                            f.write("   ‚úÖ –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (>$1M) —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π\n")
                        elif token.liquidity_usd > 250000:
                            f.write("   ‚úÖ –•–æ—Ä–æ—à–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (>$250K) –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n")
                        else:
                            f.write("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å\n")
                        
                        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
                        vol_liq_ratio = token.volume_24h / token.liquidity_usd if token.liquidity_usd > 0 else 0
                        if 0.5 <= vol_liq_ratio <= 5:
                            f.write("   ‚úÖ –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n")
                        elif vol_liq_ratio > 5:
                            f.write("   ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n")
                        else:
                            f.write("   ‚ÑπÔ∏è –ù–∏–∑–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ\n")
                        
                        # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞
                        if token.age_hours > 720:  # 30 –¥–Ω–µ–π
                            f.write("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º —Ç–æ–∫–µ–Ω (>30 –¥–Ω–µ–π)\n")
                        elif token.age_hours > 168:  # 7 –¥–Ω–µ–π
                            f.write("   ‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é (>7 –¥–Ω–µ–π)\n")
                        else:
                            f.write("   ‚ö†Ô∏è –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å\n")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        total_txns = token.buys_24h + token.sells_24h
                        if total_txns > 0:
                            buy_ratio = token.buys_24h / total_txns
                            if buy_ratio > 0.6:
                                f.write(f"   ‚úÖ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∫—É–ø–∫–∏ ({buy_ratio*100:.1f}% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n")
                            elif buy_ratio > 0.4:
                                f.write(f"   ‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏\n")
                            else:
                                f.write(f"   ‚ö†Ô∏è –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è\n")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
                        if token.price_change_24h > 100:
                            f.write("   üöÄ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏\n")
                        elif token.price_change_24h > 50:
                            f.write("   üìà –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å —Ö–æ—Ä–æ—à–µ–π –¥–∏–Ω–∞–º–∏–∫–æ–π\n")
                        else:
                            f.write("   üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç\n")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        has_website = bool(token.info.get("websites", []))
                        has_socials = bool(token.info.get("socials", []))
                        if has_website and has_socials:
                            f.write("   ‚úÖ –ï—Å—Ç—å —Å–∞–π—Ç –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n")
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                            websites = token.info.get("websites", [])
                            socials = token.info.get("socials", [])
                            
                            if websites:
                                f.write("   –°–∞–π—Ç—ã:\n")
                                for website in websites:
                                    if isinstance(website, dict):
                                        url = website.get('url', '')
                                        f.write(f"    - {url}\n")
                                    else:
                                        f.write(f"    - {website}\n")
                            
                            if socials:
                                f.write("   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n")
                                for social in socials:
                                    if isinstance(social, dict):
                                        url = social.get('url', '')
                                        f.write(f"    - {url}\n")
                                    else:
                                        f.write(f"    - {social}\n")
                        elif has_website or has_socials:
                            f.write("   ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å–µ—Ç–∏\n")
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                            websites = token.info.get("websites", [])
                            socials = token.info.get("socials", [])
                            
                            if websites:
                                f.write("   –°–∞–π—Ç—ã:\n")
                                for website in websites:
                                    if isinstance(website, dict):
                                        url = website.get('url', '')
                                        f.write(f"    - {url}\n")
                                    else:
                                        f.write(f"    - {website}\n")
                            
                            if socials:
                                f.write("   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n")
                                for social in socials:
                                    if isinstance(social, dict):
                                        url = social.get('url', '')
                                        f.write(f"    - {url}\n")
                                    else:
                                        f.write(f"    - {social}\n")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                        if hasattr(token, 'verification_result') and token.verification_result:
                            f.write("\n   üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ö–¢–ê:\n")
                            f.write(f"    - –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if token.verification_result.is_verified else '‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n")
                            f.write(f"    - Honeypot: {'üö® –î–ê' if token.verification_result.is_honeypot else '‚úÖ –ù–ï–¢'}\n")
                            buy_tax_formatted = format_tax_percentage(token.verification_result.buy_tax)
                            sell_tax_formatted = format_tax_percentage(token.verification_result.sell_tax)
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã 0%
                            if buy_tax_formatted != "0" or sell_tax_formatted != "0":
                                f.write(f"    - –ù–∞–ª–æ–≥–∏: {buy_tax_formatted}% –ø–æ–∫—É–ø–∫–∞ / {sell_tax_formatted}% –ø—Ä–æ–¥–∞–∂–∞\n")
                            if token.verification_result.owner_address:
                                f.write(f"    - –í–ª–∞–¥–µ–ª–µ—Ü: {token.verification_result.owner_address[:10]}...\n")
                            if token.verification_result.can_take_back_ownership:
                                f.write(f"    - ‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∞–≤–∞\n")
                            if token.verification_result.has_mint_function:
                                f.write(f"    - ‚ö†Ô∏è –ï—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è mint\n")
                            if token.verification_result.has_blacklist:
                                f.write(f"    - ‚ö†Ô∏è –ï—Å—Ç—å blacklist —Ñ—É–Ω–∫—Ü–∏—è\n")
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ raw_data
                            if hasattr(token.verification_result, 'raw_data') and token.verification_result.raw_data:
                                raw = token.verification_result.raw_data
                                if raw.get('is_blacklisted') == '1':
                                    f.write(f"    - üö´ –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ GoPlus\n")
                                if raw.get('slippage_modifiable') == '1':
                                    f.write(f"    - ‚ö†Ô∏è –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–π slippage\n")
                                if raw.get('is_anti_whale') == '1':
                                    f.write(f"    - ‚ö†Ô∏è Anti-whale –º–µ—Ö–∞–Ω–∏–∑–º\n")
                                if raw.get('cannot_sell_all') == '1':
                                    f.write(f"    - üö® –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã\n")
                                if raw.get('cannot_buy') == '1':
                                    f.write(f"    - üö® –ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å\n")
                                if raw.get('trading_cooldown') and raw.get('trading_cooldown') != '0':
                                    f.write(f"    - ‚è∞ –ö—É–ª–¥–∞—É–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏: {raw.get('trading_cooldown')}—Å\n")
                            
                            if token.verification_result.verification_source:
                                f.write(f"    - –ò—Å—Ç–æ—á–Ω–∏–∫: {token.verification_result.verification_source}\n")
                        
                        f.write("\n   –°—Å—ã–ª–∫–∏:\n")
                        f.write(f"    - DEX: {token.get_dex_url()}\n")
                        f.write(f"    - Explorer: {token.get_explorer_url()}\n")
                        f.write(f"    - DexScreener: {token.get_dexscreener_url()}\n")
                        f.write("\n")
                else:
                    f.write("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")
                
                # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                f.write("\n–í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n")
                f.write("-" * 80 + "\n")
                f.write("1. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∏—Å–∫–∞:\n")
                f.write("   - –ê–Ω–æ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã (>200%) –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥\n")
                f.write("   - –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (>50)\n")
                f.write("   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∞–π—Ç–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n")
                f.write("   - –í–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ < 24 —á–∞—Å–æ–≤\n")
                f.write("   - –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (<25,000 USD)\n")
                f.write("   - –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç\n")
                f.write("   - –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —É –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π\n\n")
                
                f.write("2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
                f.write("   - –û—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º —Å —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞ '–ù–∏–∑–∫–∏–π' –∏–ª–∏ '–°—Ä–µ–¥–Ω–∏–π'\n")
                f.write("   - –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ: 0.5-10)\n")
                f.write("   - –ò–∑–±–µ–≥–∞—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ —Å–∞–π—Ç–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n")
                f.write("   - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º > 48 —á–∞—Å–æ–≤\n")
                f.write("   - –ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n")
                f.write("   - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å—Ä–µ–¥–∏ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π\n")
                
                self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True
        
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            self.logger.error(error_msg)
            raise Exception(error_msg)
    
    def get_top_tokens_by_growth(self, limit: int = None, min_liquidity: float = 50000, min_age: float = 24) -> List[Token]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.logger.info(f"üéØ –ü–æ–∏—Å–∫ —Ç–æ–ø-{limit if limit else 'all'} —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # üö® –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - –ù–ï–¢ –°–ö–ê–ú–ê!
        safe_tokens = []
        for token in self.tokens:
            # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∞–º –∏ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
            if token.risk_level in ["–°–∫–∞–º", "–í—ã—Å–æ–∫–∏–π"]:
                continue
            
            # 1. –í–æ–∑—Ä–∞—Å—Ç < 24 —á–∞—Å–æ–≤ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
            if token.age_hours < 24:
                continue
            
            # 2. üö® –ö–†–ò–¢–ò–ß–ù–û: –†–æ—Å—Ç > 100% –∑–∞ 24—á = –ü–ê–ú–ü! –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if token.price_change_24h > 100:
                continue
            
            # 3. üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±—ä–µ–º < $5K –∑–∞ 24—á = –ú–ï–†–¢–í–´–ô —Ç–æ–∫–µ–Ω! (PEPE $890 - –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è)
            if token.volume_24h < 5000:
                continue
            
            # 4. –ù–µ—Ç —Å–æ—Ü—Å–µ—Ç–µ–π –ò –Ω–µ—Ç —Å–∞–π—Ç–∞
            websites = token.info.get("websites", [])
            socials = token.info.get("socials", [])
            if not websites and not socials:
                continue
            
            # 5. –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            liquidity_lock_percentage = 0
            liquidity_lock_score = 0
            if hasattr(token, 'liquidity_lock_info') and token.liquidity_lock_info and token.liquidity_lock_info.is_locked:
                liquidity_lock_percentage = token.liquidity_lock_info.locked_percentage
            if hasattr(token, 'liquidity_lock_score'):
                liquidity_lock_score = token.liquidity_lock_score
            
            is_verified = False
            if hasattr(token, 'verification_result') and token.verification_result:
                is_verified = token.verification_result.is_verified
            
            # üö® –ö–†–ò–¢–ò–ß–ù–û: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            # –ò—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è:
            # 1. –ú–µ–≥–∞-—Ç–æ–∫–µ–Ω–æ–≤ —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é > $500K + –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è + –≤–æ–∑—Ä–∞—Å—Ç > 30 –¥–Ω–µ–π
            # 2. –ò–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π > 25%
            
            has_liquidity_lock = liquidity_lock_percentage > 25
            is_mega_safe = (token.liquidity_usd > 500000 and 
                          is_verified and 
                          token.age_hours > 720)  # 30 –¥–Ω–µ–π
            
            if not (has_liquidity_lock or is_mega_safe):
                continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –º–µ–≥–∞-—Å—Ç–∞—Ç—É—Å–∞)
            # –£—Å–ª–æ–≤–∏–µ 1: üö® –ö–†–ò–¢–ò–ß–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å $100K –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if token.liquidity_usd < 100000:
                continue
            
            # –£—Å–ª–æ–≤–∏–µ 2: –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - —Ç–æ–ª—å–∫–æ –º–µ–≥–∞-–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
            if not has_liquidity_lock and not is_mega_safe:
                continue
                
            safe_tokens.append(token)
        
        self.logger.info(f"üìä –ü–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(safe_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞ (–ù–∏–∑–∫–∏–π -> –£–º–µ—Ä–µ–Ω–Ω—ã–π -> –°—Ä–µ–¥–Ω–∏–π), –ø–æ—Ç–æ–º –ø–æ —Ä–æ—Å—Ç—É —Ü–µ–Ω—ã
        safe_tokens.sort(key=lambda x: (
            0 if x.risk_level == "–ù–∏–∑–∫–∏–π" else 1 if x.risk_level == "–£–º–µ—Ä–µ–Ω–Ω—ã–π" else 2,
            -x.price_change_24h  # –ó–∞—Ç–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
        ))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ç–æ–ø-10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if limit and limit <= 10:
            self.logger.info("üèÜ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –¢–û–ü-10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            top_tokens = []
            for token in safe_tokens:
                # –¢–û–ü-10: –°–ú–Ø–ì–ß–ï–ù–ù–´–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ - –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å > $75K
                if token.liquidity_usd < 75000:
                    continue
                
                # –¢–û–ü-10: –í–æ–∑—Ä–∞—Å—Ç > 3 –¥–Ω—è (—Å–º—è–≥—á–µ–Ω–æ)
                if token.age_hours < 72:  # 3 –¥–Ω—è
                    continue
                
                # –¢–û–ü-10: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∏–∑–∫–æ–º—É –∏ —É–º–µ—Ä–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É
                if token.risk_level not in ["–ù–∏–∑–∫–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π"]:
                    continue
                
                top_tokens.append(token)
                
                if len(top_tokens) >= limit:
                    break
            
            result = top_tokens
            self.logger.info(f"üèÜ –¢–û–ü-{limit}: {len(result)} —ç–ª–∏—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        else:
            result = safe_tokens[:limit] if limit else safe_tokens
            self.logger.info(f"üìà –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(result)} —Ç–æ–∫–µ–Ω–æ–≤")
        
        return result
    
    def generate_compact_recommendations_report(self, file_path: str, tokens_list: List = None) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¢–û–õ–¨–ö–û —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ (—É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)"""
        self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {file_path}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
            if tokens_list is None:
                tokens_list = self.get_top_tokens_by_growth(
                    limit=None,
                    min_liquidity=self.config.get("min_liquidity", 50000),
                    min_age=24
                )
            
            if not tokens_list:
                self.logger.warning("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
                return False
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã: —Å–Ω–∞—á–∞–ª–∞ –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫, –ø–æ—Ç–æ–º —Å—Ä–µ–¥–Ω–∏–π, –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ —Ä–æ—Å—Ç—É
            sorted_tokens = sorted(tokens_list, key=lambda x: (
                0 if x.risk_level == "–ù–∏–∑–∫–∏–π" else 1,
                -x.price_change_24h
            ))
            
            with open(file_path, 'w', encoding='utf-8') as f:
                # –¢–û–õ–¨–ö–û –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - —É–±–∏—Ä–∞–µ–º –≤—Å—ë –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
                f.write("\n–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –¢–û–ö–ï–ù–´\n")
                f.write("-" * 80 + "\n")
                
                for i, token in enumerate(sorted_tokens, 1):
                    f.write(f"{i}. {token.symbol} ({token.network})\n")
                    f.write("   " + "-" * 40 + "\n")
                    f.write(f"   –†–æ—Å—Ç: 1—á: {token.price_change_1h:.2f}%, 6—á: {token.price_change_6h:.2f}%, 24—á: {token.price_change_24h:.2f}%\n")
                    f.write(f"   –†–∏—Å–∫: {token.risk_level}\n")
                    
                    # üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –≠–ú–û–î–ó–ò –û–ë–†–ê–¢–ù–û
                    if token.price_change_1h < 0:
                        if token.price_change_24h > 50:
                            f.write("   ‚ö° –û–¢–ö–ê–¢ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫\n")
                        else:
                            f.write("   üìâ –ö–û–†–†–ï–ö–¶–ò–Ø - –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞\n")
                    
                    f.write(f"   –í–æ–∑—Ä–∞—Å—Ç: {self._format_age(token.age_hours)}\n")
                    f.write(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (24—á): {token.price_change_24h:.2f}%\n")
                    f.write(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${token.liquidity_usd:,.2f}K, –û–±—ä–µ–º: ${token.volume_24h:,.2f}K\n")
                    f.write(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {token.volume_24h/token.liquidity_usd if token.liquidity_usd > 0 else 0:.2f}\n")
                    
                    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –° –≠–ú–û–î–ó–ò
                    if hasattr(token, 'liquidity_lock_info') and token.liquidity_lock_info:
                        lock_info = token.liquidity_lock_info
                        if lock_info.is_locked:
                            f.write(f"   üîí –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {lock_info.locked_percentage:.1f}% –Ω–∞ {lock_info.lock_duration_days} –¥–Ω–µ–π ({lock_info.platform})\n")
                        else:
                            f.write(f"   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ rug pull!\n")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
                    positive_factors = []
                    negative_factors = []
                    
                    # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    if token.liquidity_usd >= 100000:
                        positive_factors.append("‚úÖ –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –Ω–∏–∑–∫–∏–µ —Ä–∏—Å–∫–∏")
                    elif token.liquidity_usd >= 50000:
                        negative_factors.append("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å")
                    else:
                        negative_factors.append("üî¥ –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏")
                    
                    # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π
                    volume_ratio = token.volume_24h / token.liquidity_usd if token.liquidity_usd > 0 else 0
                    if volume_ratio > 20:
                        negative_factors.append("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ V/L - –≤–æ–∑–º–æ–∂–Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è")
                    elif volume_ratio > 5:
                        negative_factors.append("üü° –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ V/L - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
                    elif volume_ratio >= 0.1:
                        positive_factors.append("üü¢ –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                    else:
                        negative_factors.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                    
                    # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞
                    if token.age_hours >= 720:  # 30+ –¥–Ω–µ–π
                        positive_factors.append("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º —Ç–æ–∫–µ–Ω (>30 –¥–Ω–µ–π)")
                    else:
                        negative_factors.append("‚ö†Ô∏è –ú–æ–ª–æ–¥–æ–π —Ç–æ–∫–µ–Ω - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏")
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
                    if token.price_change_24h > 100:
                        positive_factors.append("üöÄ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
                        negative_factors.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏")
                    elif token.price_change_24h > 50:
                        positive_factors.append("üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç - —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª")
                    else:
                        positive_factors.append("üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç - –Ω–∏–∑–∫–∏–µ —Ä–∏—Å–∫–∏")
                    
                    # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                    if hasattr(token, 'verification_result') and token.verification_result:
                        if token.verification_result.is_verified:
                            positive_factors.append("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                        else:
                            negative_factors.append("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                        
                        if token.verification_result.is_honeypot:
                            negative_factors.append("üçØ HONEYPOT - –∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–æ!")
                        else:
                            positive_factors.append("‚úÖ –ù–µ —è–≤–ª—è–µ—Ç—Å—è honeypot")
                    
                    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    if hasattr(token, 'liquidity_lock_info') and token.liquidity_lock_info:
                        if token.liquidity_lock_info.is_locked:
                            lock_score = getattr(token, 'liquidity_lock_score', 0)
                            if lock_score >= 80:
                                positive_factors.append("üîí –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                            elif lock_score >= 50:
                                positive_factors.append("üîí –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                            else:
                                negative_factors.append("üîì –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                        else:
                            negative_factors.append("‚ùå –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - —Ä–∏—Å–∫ rug pull!")
                    
                    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ —Å–∞–π—Ç—ã
                    websites = token.info.get("websites", [])
                    socials = token.info.get("socials", [])
                    if websites and socials:
                        positive_factors.append("‚úÖ –ü–æ–ª–Ω–æ–µ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ (—Å–∞–π—Ç + —Å–æ—Ü—Å–µ—Ç–∏)")
                    elif websites or socials:
                        positive_factors.append("‚úÖ –ï—Å—Ç—å –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ")
                    else:
                        negative_factors.append("‚ö†Ô∏è –ù–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è")
                    
                    # –í—ã–≤–æ–¥–∏–º —Ñ–∞–∫—Ç–æ—Ä—ã
                    if positive_factors:
                        f.write("\n   üíö –ü–û–ß–ï–ú–£ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú:\n")
                        for factor in positive_factors:
                            f.write(f"   {factor}\n")
                    
                    if negative_factors:
                        f.write("\n   ‚ù§Ô∏è‚Äçüî• –†–ò–°–ö–ò –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n")
                        for factor in negative_factors:
                            f.write(f"   {factor}\n")
                    
                    # –°–∞–π—Ç—ã
                    if websites:
                        f.write("   –°–∞–π—Ç—ã:\n")
                        for website in websites:
                            if isinstance(website, dict):
                                url = website.get('url', '')
                            else:
                                url = str(website)
                            if url:
                                f.write(f"    - {url}\n")
                    
                    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                    if socials:
                        f.write("   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n")
                        for social in socials:
                            if isinstance(social, dict):
                                url = social.get('url', '')
                            else:
                                url = str(social)
                            if url:
                                f.write(f"    - {url}\n")
                    
                    # üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ö–¢–ê —Å —ç–º–æ–¥–∑–∏
                    if hasattr(token, 'verification_result') and token.verification_result:
                        f.write("\n   üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ö–¢–ê:\n")
                        verification_status = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if token.verification_result.is_verified else "‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
                        honeypot_status = "üçØ HONEYPOT" if token.verification_result.is_honeypot else "‚úÖ –ù–ï–¢"
                        f.write(f"    - –°—Ç–∞—Ç—É—Å: {verification_status}\n")
                        f.write(f"    - Honeypot: {honeypot_status}\n")
                        if token.verification_result.verification_source:
                            f.write(f"    - –ò—Å—Ç–æ—á–Ω–∏–∫: {token.verification_result.verification_source}\n")
                    
                    # üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê –†–ò–°–ö-–°–ö–û–†–ê (–¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
                    if hasattr(token, 'score_breakdown') and token.score_breakdown:
                        f.write(f"\n   üìä –†–ò–°–ö-–°–ö–û–†: {token.risk_score} –±–∞–ª–ª–æ–≤\n")
                        f.write("   –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º:\n")
                        for factor in token.score_breakdown:
                            f.write(f"    ‚Ä¢ {factor}\n")
                    
                    # –°—Å—ã–ª–∫–∏ - –í –ö–û–ù–¶–ï, –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º
                    f.write("\n   –°—Å—ã–ª–∫–∏:\n")
                    f.write(f"    - DEX: {token.get_dex_url()}\n")
                    f.write(f"    - Explorer: {token.get_explorer_url()}\n")
                    f.write(f"    - DexScreener: {token.get_dexscreener_url()}\n")
                    
                    f.write("\n")
                
            self.logger.info(f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"
            self.logger.error(error_msg)
            return False
    
    def _format_age(self, hours: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if hours < 24:
            return f"{hours:.1f}—á"
        elif hours < 24 * 7:
            days = hours / 24
            return f"{days:.1f}–¥"
        elif hours < 24 * 30:
            weeks = hours / (24 * 7)
            days = (hours % (24 * 7)) / 24
            return f"{weeks:.0f}–Ω {days:.0f}–¥"
        else:
            months = hours / (24 * 30)
            weeks = (hours % (24 * 30)) / (24 * 7)
            days = (hours % (24 * 7)) / 24
            return f"{months:.0f}–º {weeks:.0f}–Ω {days:.0f}–¥"
    
    def format_tax_percentage(self, tax_value) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if tax_value is None or tax_value == '' or tax_value == 'N/A':
            return '0%'
        
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            if isinstance(tax_value, str) and '%' in tax_value:
                return tax_value
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            tax_num = float(tax_value)
            
            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —É–∂–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            if tax_num > 1:
                return f"{tax_num:.1f}%"
            else:
                # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 1, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100
                return f"{tax_num * 100:.1f}%"
        except:
            return '0%'
    
    def export_recommended_to_json(self, file_path: str) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ JSON —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ JSON: {file_path}")
        try:
            recommended = [t for t in self.tokens if 
                          t.risk_level in ["–ù–∏–∑–∫–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–°—Ä–µ–¥–Ω–∏–π"] and 
                          t.price_change_24h > 10 and 
                          t.liquidity_usd > 50000]
            
            recommended.sort(key=lambda x: x.price_change_24h, reverse=True)
            
            export_data = {
                "timestamp": datetime.now().isoformat(),
                "total_tokens": len(self.tokens),
                "recommended_count": len(recommended),
                "risk_distribution": {
                    "scam": len(self.scam_tokens),
                    "high": len(self.high_risk_tokens),
                    "medium": len(self.medium_risk_tokens),
                    "low": len(self.low_risk_tokens)
                },
                "recommended_tokens": []
            }
            
            for token in recommended:
                # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ —Ü–µ–Ω—ã
                trend_1h = token.price_change_1h
                trend_6h = token.price_change_6h
                trend_24h = token.price_change_24h
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
                trend_analysis = ""
                if trend_1h > 0 and trend_1h > trend_6h:
                    trend_analysis = "–ê–ö–¢–ò–í–ù–´–ô –†–û–°–¢ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"
                elif trend_1h < 0 and trend_6h < 0:
                    trend_analysis = "–ö–û–†–†–ï–ö–¶–ò–Ø - –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"
                elif trend_1h > 0 and trend_6h > 0 and trend_24h > 0:
                    trend_analysis = "–£–°–¢–û–ô–ß–ò–í–´–ô –†–û–°–¢ - —Ö–æ—Ä–æ—à–∞—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞"
                elif trend_1h < 0 and trend_6h > 0:
                    trend_analysis = "–û–¢–ö–ê–¢ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫"
                elif abs(trend_1h) < 2 and abs(trend_6h) < 5:
                    trend_analysis = "–ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"
                elif trend_24h > 100 and trend_1h < 0:
                    trend_analysis = "–ü–ï–†–ï–ö–£–ü–õ–ï–ù - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"
                else:
                    trend_analysis = "–°–ú–ï–®–ê–ù–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"
                
                # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞
                vol_liq_ratio = token.volume_24h / token.liquidity_usd if token.liquidity_usd > 0 else 0
                liquidity_analysis = ""
                if token.liquidity_usd > 1000000:
                    liquidity_analysis = "–í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (>$1M) —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π"
                elif token.liquidity_usd > 250000:
                    liquidity_analysis = "–•–æ—Ä–æ—à–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (>$250K) –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
                else:
                    liquidity_analysis = "–°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
                
                # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞
                age_analysis = ""
                if token.age_hours > 720:  # 30 –¥–Ω–µ–π
                    age_analysis = "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º —Ç–æ–∫–µ–Ω (>30 –¥–Ω–µ–π)"
                elif token.age_hours > 168:  # 7 –¥–Ω–µ–π
                    age_analysis = "–¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é (>7 –¥–Ω–µ–π)"
                else:
                    age_analysis = "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
                
                # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                transaction_analysis = ""
                total_txns = token.buys_24h + token.sells_24h
                if total_txns > 0:
                    buy_ratio = token.buys_24h / total_txns
                    if buy_ratio > 0.6:
                        transaction_analysis = f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∫—É–ø–∫–∏ ({buy_ratio*100:.1f}% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)"
                    elif buy_ratio > 0.4:
                        transaction_analysis = "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏"
                    else:
                        transaction_analysis = "–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞
                growth_analysis = ""
                if token.price_change_24h > 100:
                    growth_analysis = "–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏"
                elif token.price_change_24h > 50:
                    growth_analysis = "–£–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å —Ö–æ—Ä–æ—à–µ–π –¥–∏–Ω–∞–º–∏–∫–æ–π"
                else:
                    growth_analysis = "–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç"
                
                token_data = {
                    "basic_info": {
                        "symbol": token.symbol,
                        "name": token.name,
                        "network": token.network,
                        "address": token.address,
                        "age": token.format_age(),
                        "age_hours": token.age_hours
                    },
                    "price_metrics": {
                        "price_usd": token.price_usd,
                        "price_native": token.price_native,
                        "price_change_1h": token.price_change_1h,
                        "price_change_6h": token.price_change_6h,
                        "price_change_24h": token.price_change_24h
                    },
                    "market_metrics": {
                        "liquidity_usd": token.liquidity_usd,
                        "volume_24h": token.volume_24h,
                        "volume_6h": token.volume_6h,
                        "volume_1h": token.volume_1h,
                        "volume_liquidity_ratio": vol_liq_ratio,
                        "market_cap": token.market_cap,
                        "fdv": token.fdv
                    },
                    "transaction_metrics": {
                        "buys_24h": token.buys_24h,
                        "sells_24h": token.sells_24h,
                        "buy_sell_ratio": token.buys_24h / (token.buys_24h + token.sells_24h) if (token.buys_24h + token.sells_24h) > 0 else 0
                    },
                    "risk_metrics": {
                        "risk_score": token.risk_score,
                        "risk_level": token.risk_level,
                        "risk_factors": token.risk_factors
                    },
                    "analysis": {
                        "trend": trend_analysis,
                        "liquidity": liquidity_analysis,
                        "age": age_analysis,
                        "transactions": transaction_analysis,
                        "growth": growth_analysis
                    },
                    "links": {
                        "dex": token.get_dex_url(),
                        "explorer": token.get_explorer_url(),
                        "dexscreener": token.get_dexscreener_url(),
                        "websites": token.info.get("websites", []),
                        "socials": token.info.get("socials", [])
                    },
                    "contract_info": {
                        "verified": token.info.get("contract", {}).get("verified", False),
                        "holders": token.info.get("holders", {})
                    },
                    "verification_data": {
                        "is_verified": getattr(token, 'verification_result', None) and token.verification_result.is_verified or False,
                        "is_honeypot": getattr(token, 'verification_result', None) and token.verification_result.is_honeypot or False,
                        "buy_tax": getattr(token, 'verification_result', None) and token.verification_result.buy_tax or "0",
                        "sell_tax": getattr(token, 'verification_result', None) and token.verification_result.sell_tax or "0",
                        "owner_address": getattr(token, 'verification_result', None) and token.verification_result.owner_address or "",
                        "can_take_back_ownership": getattr(token, 'verification_result', None) and token.verification_result.can_take_back_ownership or False,
                        "has_mint_function": getattr(token, 'verification_result', None) and token.verification_result.has_mint_function or False,
                        "has_blacklist": getattr(token, 'verification_result', None) and token.verification_result.has_blacklist or False,
                        "is_proxy": getattr(token, 'verification_result', None) and token.verification_result.is_proxy or False,
                        "verification_source": getattr(token, 'verification_result', None) and token.verification_result.verification_source or "",
                        "error_message": getattr(token, 'verification_result', None) and token.verification_result.error_message or ""
                    },
                    "liquidity_lock": {
                        "is_locked": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.is_locked or False,
                        "locked_percentage": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.locked_percentage or 0.0,
                        "unlock_date": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.unlock_date and token.liquidity_lock_info.unlock_date.isoformat() or "",
                        "lock_duration_days": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.lock_duration_days or 0,
                        "platform": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.platform or "",
                        "lock_contract": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.lock_contract or "",
                        "total_locked_amount": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.total_locked_amount or 0.0,
                        "lock_transaction": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.lock_transaction or "",
                        "is_renewable": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.is_renewable or False,
                        "lock_owner": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.lock_owner or "",
                        "lock_score": getattr(token, 'liquidity_lock_score', 0),
                        "safety_level": "HIGH" if getattr(token, 'liquidity_lock_score', 0) >= 80 else "MEDIUM" if getattr(token, 'liquidity_lock_score', 0) >= 50 else "LOW",
                        "warnings": getattr(token, 'liquidity_lock_info', None) and token.liquidity_lock_info.warnings or []
                    },
                    "security_analysis": {
                        "security_score": getattr(token, 'security_score', 0.0),
                        "contract_verified": getattr(token, 'contract_verified', False),
                        "ownership_renounced": getattr(token, 'ownership_renounced', False),
                        "liquidity_locked": getattr(token, 'liquidity_locked', False),
                        "honeypot_probability": getattr(token, 'honeypot_probability', 0.0),
                        "security_issues": getattr(token, 'security_issues', []),
                        "security_level": "LOW" if getattr(token, 'security_score', 1.0) <= 0.4 else "MEDIUM" if getattr(token, 'security_score', 1.0) <= 0.6 else "HIGH" if getattr(token, 'security_score', 1.0) <= 0.8 else "CRITICAL",
                        "security_recommendations": self.get_security_recommendations(token),
                        "external_checks": getattr(token, 'security_report', {}).external_checks if hasattr(token, 'security_report') and token.security_report else {}
                    }
                }
                
                export_data["recommended_tokens"].append(token_data)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ JSON: {str(e)}"
            self.logger.error(error_msg)
            raise Exception(error_msg) 
    
    def get_security_recommendations(self, token: Token) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
        recommendations = []
        
        if hasattr(token, 'security_score'):
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ security score
            if token.security_score >= 0.8:
                recommendations.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ò–ù–í–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
            elif token.security_score >= 0.6:
                recommendations.append("üî¥ –í–´–°–û–ö–ò–ô –†–ò–°–ö - –¢–†–ï–ë–£–ï–¢–°–Ø –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨")
            elif token.security_score >= 0.4:
                recommendations.append("üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö - –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
            else:
                recommendations.append("üü¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö - –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û –ë–ï–ó–û–ü–ê–°–ï–ù")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if hasattr(token, 'contract_verified') and not token.contract_verified:
                recommendations.append("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥")
            
            if hasattr(token, 'ownership_renounced') and not token.ownership_renounced:
                recommendations.append("‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω - —Ä–∏—Å–∫ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            if hasattr(token, 'liquidity_locked') and not token.liquidity_locked:
                recommendations.append("‚ö†Ô∏è –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - —Ä–∏—Å–∫ rug pull")
            
            if hasattr(token, 'honeypot_probability') and token.honeypot_probability > 0.5:
                recommendations.append("üö® –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å honeypot - –ù–ï –ü–û–ö–£–ü–ê–¢–¨")
            
            if hasattr(token, 'security_issues') and token.security_issues:
                for issue in token.security_issues[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
                    recommendations.append(f"‚ö†Ô∏è {issue}")
        
        return recommendations
    
    def generate_security_report(self, file_path: str, tokens_list: List[Token] = None) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        if tokens_list is None:
            tokens_list = self.tokens
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã - –∏—Å–∫–ª—é—á–∞–µ–º —Å–∫–∞–º
        tokens_to_analyze = [token for token in tokens_list if token.risk_level != "–°–∫–∞–º"]
        
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_path = f"{file_path}_security_{timestamp}.txt"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write("=" * 80 + "\n")
                f.write("üîí –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –¢–û–ö–ï–ù–û–í\n")
                f.write("=" * 80 + "\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens_list)}\n")
                f.write(f"–¢–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len(tokens_to_analyze)} (–∏—Å–∫–ª—é—á–∞—è {len(tokens_list) - len(tokens_to_analyze)} —Å–∫–∞–º-—Ç–æ–∫–µ–Ω–æ–≤)\n\n")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_stats = self.calculate_security_statistics(tokens_to_analyze)
                f.write("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
                f.write("-" * 40 + "\n")
                f.write(f"üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é: {security_stats['analyzed']}\n")
                f.write(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {security_stats['safe']}\n")
                f.write(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {security_stats['issues']}\n")
                f.write(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫: {security_stats['critical']}\n")
                f.write(f"üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: {security_stats['high']}\n")
                f.write(f"üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {security_stats['medium']}\n")
                f.write(f"üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {security_stats['low']}\n\n")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                f.write("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
                f.write("=" * 80 + "\n\n")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
                if security_stats['critical_tokens']:
                    f.write("üö® –¢–û–ö–ï–ù–´ –° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú –†–ò–°–ö–û–ú:\n")
                    f.write("-" * 50 + "\n")
                    for token in security_stats['critical_tokens'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
                        f.write(self.format_security_token_info(token, "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"))
                    f.write("\n")
                
                # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
                if security_stats['high_tokens']:
                    f.write("üî¥ –¢–û–ö–ï–ù–´ –° –í–´–°–û–ö–ò–ú –†–ò–°–ö–û–ú:\n")
                    f.write("-" * 50 + "\n")
                    for token in security_stats['high_tokens'][:10]:
                        f.write(self.format_security_token_info(token, "–í–´–°–û–ö–ò–ô"))
                    f.write("\n")
                
                # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
                if security_stats['medium_tokens']:
                    f.write("üü° –¢–û–ö–ï–ù–´ –°–û –°–†–ï–î–ù–ò–ú –†–ò–°–ö–û–ú:\n")
                    f.write("-" * 50 + "\n")
                    for token in security_stats['medium_tokens'][:5]:
                        f.write(self.format_security_token_info(token, "–°–†–ï–î–ù–ò–ô"))
                    f.write("\n")
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                if security_stats['safe_tokens']:
                    f.write("üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ï –¢–û–ö–ï–ù–´:\n")
                    f.write("-" * 50 + "\n")
                    for token in security_stats['safe_tokens'][:5]:
                        f.write(self.format_security_token_info(token, "–ë–ï–ó–û–ü–ê–°–ù–´–ô"))
                    f.write("\n")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                f.write("‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
                f.write("=" * 80 + "\n\n")
                
                security_issues_analysis = self.analyze_security_issues(tokens_to_analyze)
                for issue_type, count in security_issues_analysis.items():
                    f.write(f"{issue_type}: {count} —Ç–æ–∫–µ–Ω–æ–≤\n")
                
                f.write("\n" + "=" * 80 + "\n")
                f.write("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
                f.write("=" * 80 + "\n")
                f.write("1. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n")
                f.write("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç multisig/timelock\n")
                f.write("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫\n")
                f.write("4. –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é honeypot\n")
                f.write("5. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º–∏\n")
                f.write("6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç wash trading\n")
                f.write("7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n")
                # –†–∞–Ω–µ–µ –∑–¥–µ—Å—å –±—ã–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ 1inch ‚Äî —É–¥–∞–ª–µ–Ω–∞
            
            self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}")
            return False
    
    def calculate_security_statistics(self, tokens: List[Token]) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        stats = {
            'analyzed': 0,
            'safe': 0,
            'issues': 0,
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0,
            'critical_tokens': [],
            'high_tokens': [],
            'medium_tokens': [],
            'safe_tokens': []
        }
        
        for token in tokens:
            if hasattr(token, 'security_score') and token.security_score is not None:
                stats['analyzed'] += 1
                
                if token.security_score >= 0.8:
                    stats['critical'] += 1
                    stats['critical_tokens'].append(token)
                elif token.security_score >= 0.6:
                    stats['high'] += 1
                    stats['high_tokens'].append(token)
                elif token.security_score >= 0.4:
                    stats['medium'] += 1
                    stats['medium_tokens'].append(token)
                else:
                    stats['low'] += 1
                    stats['safe_tokens'].append(token)
                
                if token.security_issues:
                    stats['issues'] += 1
                else:
                    stats['safe'] += 1
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ security_score
        stats['critical_tokens'].sort(key=lambda x: x.security_score, reverse=True)
        stats['high_tokens'].sort(key=lambda x: x.security_score, reverse=True)
        stats['medium_tokens'].sort(key=lambda x: x.security_score, reverse=True)
        stats['safe_tokens'].sort(key=lambda x: x.security_score)
        
        return stats
    
    def format_security_token_info(self, token: Token, risk_level: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        info = f"üî∏ {token.symbol} ({token.name})\n"
        info += f"   –ê–¥—Ä–µ—Å: {token.address}\n"
        info += f"   –°–µ—Ç—å: {token.network}\n"
        info += f"   –¶–µ–Ω–∞: ${token.price_usd:.6f}\n"
        info += f"   –¶–µ–Ω–∞ (–Ω–∞—Ç–∏–≤–Ω–∞—è): {token.price_native:.8f}\n"
        info += f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${token.liquidity_usd:,.0f}\n"
        info += f"   –û–±—ä–µ–º 24—á: ${token.volume_24h:,.0f}\n"
        info += f"   –û–±—ä–µ–º 6—á: ${token.volume_6h:,.0f}\n"
        info += f"   –û–±—ä–µ–º 1—á: ${token.volume_1h:,.0f}\n"
        info += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 24—á: {token.price_change_24h:+.1f}%\n"
        info += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 6—á: {token.price_change_6h:+.1f}%\n"
        info += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 1—á: {token.price_change_1h:+.1f}%\n"
        info += f"   –ü–æ–∫—É–ø–∫–∏ 24—á: {token.buys_24h}\n"
        info += f"   –ü—Ä–æ–¥–∞–∂–∏ 24—á: {token.sells_24h}\n"
        info += f"   FDV: ${token.fdv:,.0f}\n"
        info += f"   Market Cap: ${token.market_cap:,.0f}\n"
        info += f"   –í–æ–∑—Ä–∞—Å—Ç: {token.format_age()}\n"
        info += f"   Risk Score: {token.risk_score}\n"
        info += f"   Risk Level: {token.risk_level}\n"
        info += f"   Security Score: {token.security_score:.3f} ({risk_level})\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if hasattr(token, 'contract_verified'):
            info += f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if token.contract_verified else '‚ùå'}\n"
        if hasattr(token, 'ownership_renounced'):
            info += f"   –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if token.ownership_renounced else '‚ùå'}\n"
        if hasattr(token, 'liquidity_locked'):
            info += f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if token.liquidity_locked else '‚ùå'}\n"
        if hasattr(token, 'honeypot_probability'):
            info += f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å honeypot: {token.honeypot_probability:.1%}\n"
        
        # –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if token.security_issues:
            info += f"   –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
            for issue in token.security_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
                info += f"     ‚ö†Ô∏è {issue}\n"
        
        # –í—Å–µ 3 —Å—Å—ã–ª–∫–∏
        info += f"   üîó –°—Å—ã–ª–∫–∏:\n"
        info += f"     üìä DexScreener: {token.get_dexscreener_url()}\n"
        info += f"     üîç Explorer: {token.get_explorer_url()}\n"
        info += f"     üí± DEX: {token.get_dex_url()}\n"
        
        # –ë–ª–æ–∫ 1inch —É–¥–∞–ª–µ–Ω
        
        info += "\n"
        
        return info
    
    def analyze_security_issues(self, tokens: List[Token]) -> Dict[str, int]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        issues_count = {}
        
        for token in tokens:
            if hasattr(token, 'security_issues') and token.security_issues:
                for issue in token.security_issues:
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
                    if '–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' in issue.lower():
                        issues_count['–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã'] = issues_count.get('–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã', 0) + 1
                    elif '—Ä–µ–Ω–æ–Ω—Å' in issue.lower():
                        issues_count['–ù–µ —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã'] = issues_count.get('–ù–µ —Ä–µ–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã', 0) + 1
                    elif '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å' in issue.lower():
                        issues_count['–ù–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'] = issues_count.get('–ù–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å', 0) + 1
                    elif 'honeypot' in issue.lower():
                        issues_count['Honeypot –ø—Ä–∏–∑–Ω–∞–∫–∏'] = issues_count.get('Honeypot –ø—Ä–∏–∑–Ω–∞–∫–∏', 0) + 1
                    elif '–∫–æ–º–∏—Å—Å–∏–∏' in issue.lower():
                        issues_count['–í—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏'] = issues_count.get('–í—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏', 0) + 1
                    elif '–ø–∞—Ç—Ç–µ—Ä–Ω' in issue.lower():
                        issues_count['–û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'] = issues_count.get('–û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', 0) + 1
                    else:
                        issues_count['–î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã'] = issues_count.get('–î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã', 0) + 1
        
        return dict(sorted(issues_count.items(), key=lambda x: x[1], reverse=True))
    
    def generate_unified_report(self, file_path: str, tokens_list: Optional[List[Token]] = None) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if tokens_list is None:
            tokens_list = self.filtered_tokens if self.filtered_tokens else self.tokens
        
        self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {file_path}")
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
                f.write("=" * 100 + "\n")
                f.write(" " * 25 + "–û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –û–¢–ß–ï–¢: –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–û–í –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨" + " " * 25 + "\n")
                f.write("=" * 100 + "\n\n")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                f.write("üìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n")
                f.write("=" * 100 + "\n")
                f.write(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"üîç –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens_list)}\n")
                f.write(f"üîí –¢–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len([t for t in tokens_list if t.risk_level != '–°–∫–∞–º'])}\n\n")
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                f.write("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
                f.write("=" * 100 + "\n")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫–∞–º
                risk_levels = {"–°–∫–∞–º": 0, "–í—ã—Å–æ–∫–∏–π": 0, "–°—Ä–µ–¥–Ω–∏–π": 0, "–£–º–µ—Ä–µ–Ω–Ω—ã–π": 0, "–ù–∏–∑–∫–∏–π": 0}
                networks = {}
                security_stats = {"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ": 0, "–° –ø—Ä–æ–±–ª–µ–º–∞–º–∏": 0, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫": 0}
                
                for token in tokens_list:
                    risk_levels[token.risk_level] = risk_levels.get(token.risk_level, 0) + 1
                    networks[token.network] = networks.get(token.network, 0) + 1
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    if hasattr(token, 'security_score'):
                        if token.security_score >= 0.8:
                            security_stats["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫"] += 1
                        elif token.security_score >= 0.6:
                            security_stats["–° –ø—Ä–æ–±–ª–µ–º–∞–º–∏"] += 1
                        else:
                            security_stats["–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ"] += 1
                
                f.write("üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞:\n")
                f.write("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n")
                f.write("‚îÇ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞  ‚îÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ‚îÇ –ü—Ä–æ—Ü–µ–Ω—Ç  ‚îÇ –≠–º–æ–¥–∑–∏      ‚îÇ\n")
                f.write("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n")
                risk_emojis = {"–°–∫–∞–º": "üö®", "–í—ã—Å–æ–∫–∏–π": "üî¥", "–°—Ä–µ–¥–Ω–∏–π": "üü°", "–£–º–µ—Ä–µ–Ω–Ω—ã–π": "üü†", "–ù–∏–∑–∫–∏–π": "üü¢"}
                for level, count in risk_levels.items():
                    percentage = (count / len(tokens_list)) * 100 if tokens_list else 0
                    emoji = risk_emojis.get(level, "‚ùì")
                    f.write(f"‚îÇ {level:14} ‚îÇ {count:8} ‚îÇ {percentage:7.1f}% ‚îÇ {emoji:10} ‚îÇ\n")
                f.write("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n")
                
                f.write("üåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç—è–º:\n")
                f.write("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n")
                f.write("‚îÇ –°–µ—Ç—å           ‚îÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ‚îÇ –ü—Ä–æ—Ü–µ–Ω—Ç  ‚îÇ\n")
                f.write("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n")
                for network, count in sorted(networks.items()):
                    percentage = (count / len(tokens_list)) * 100 if tokens_list else 0
                    f.write(f"‚îÇ {network:14} ‚îÇ {count:8} ‚îÇ {percentage:7.1f}% ‚îÇ\n")
                f.write("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if any(hasattr(t, 'security_score') for t in tokens_list):
                    f.write("üîí –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n")
                    f.write("=" * 100 + "\n")
                    f.write("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n")
                    f.write("‚îÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è        ‚îÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ‚îÇ –ü—Ä–æ—Ü–µ–Ω—Ç  ‚îÇ\n")
                    f.write("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n")
                    security_tokens = [t for t in tokens_list if hasattr(t, 'security_score')]
                    for category, count in security_stats.items():
                        percentage = (count / len(security_tokens)) * 100 if security_tokens else 0
                        f.write(f"‚îÇ {category:18} ‚îÇ {count:8} ‚îÇ {percentage:7.1f}% ‚îÇ\n")
                    f.write("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∏—Å–∫–∞
                f.write("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú\n")
                f.write("=" * 100 + "\n\n")
                
                for risk_level in ["–°–∫–∞–º", "–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "–ù–∏–∑–∫–∏–π"]:
                    level_tokens = [t for t in tokens_list if t.risk_level == risk_level]
                    if not level_tokens:
                        continue
                    
                    emoji = risk_emojis.get(risk_level, "‚ùì")
                    f.write(f"{emoji} –¢–û–ö–ï–ù–´ –° –£–†–û–í–ù–ï–ú –†–ò–°–ö–ê: {risk_level.upper()}\n")
                    f.write("‚îÄ" * 100 + "\n")
                    f.write(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(level_tokens)}\n\n")
                    
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
                    level_tokens.sort(key=lambda x: x.risk_score, reverse=True)
                    
                    for i, token in enumerate(level_tokens, 1):
                        f.write(f"{i}. {token.symbol} ({token.network})\n")
                        f.write("   " + "‚îÄ" * 80 + "\n")
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                        if hasattr(token, 'address'):
                            f.write(f"   –ê–¥—Ä–µ—Å: {token.address}\n")
                        if hasattr(token, 'network'):
                            f.write(f"   –°–µ—Ç—å: {token.network}\n")
                        
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        f.write(f"   üí∞ –¶–µ–Ω–∞: ${token.price_usd:.6f} | {token.price_native:.8f} {token.network.upper()}\n")
                        f.write(f"   üìà –†–æ—Å—Ç: 1—á: {token.price_change_1h:+.1f}% | 6—á: {token.price_change_6h:+.1f}% | 24—á: {token.price_change_24h:+.1f}%\n")
                        f.write(f"   üíé –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${token.liquidity_usd:,.0f} | –û–±—ä–µ–º 24—á: ${token.volume_24h:,.0f}\n")
                        if hasattr(token, 'volume_6h'):
                            f.write(f"   –û–±—ä–µ–º 6—á: ${token.volume_6h:,.0f}\n")
                        if hasattr(token, 'volume_1h'):
                            f.write(f"   –û–±—ä–µ–º 1—á: ${token.volume_1h:,.0f}\n")
                        if hasattr(token, 'buys_24h'):
                            f.write(f"   –ü–æ–∫—É–ø–∫–∏ 24—á: {token.buys_24h}\n")
                        if hasattr(token, 'sells_24h'):
                            f.write(f"   –ü—Ä–æ–¥–∞–∂–∏ 24—á: {token.sells_24h}\n")
                        f.write(f"   üìä FDV: ${token.fdv:,.0f} | Market Cap: ${token.market_cap:,.0f}\n")
                        f.write(f"   ‚è∞ –í–æ–∑—Ä–∞—Å—Ç: {token.format_age()} | Risk Score: {token.risk_score}\n")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        if hasattr(token, 'security_score'):
                            f.write(f"   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {token.security_score:.3f}\n")
                            
                            # –°—Ç–∞—Ç—É—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            security_status = []
                            if hasattr(token, 'contract_verified'):
                                security_status.append(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {'‚úÖ' if token.contract_verified else '‚ùå'}")
                            if hasattr(token, 'ownership_renounced'):
                                security_status.append(f"–í–ª–∞–¥–µ–ª–µ—Ü: {'‚úÖ' if token.ownership_renounced else '‚ùå'}")
                            if hasattr(token, 'liquidity_locked'):
                                security_status.append(f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ' if token.liquidity_locked else '‚ùå'}")
                            if hasattr(token, 'honeypot_probability'):
                                security_status.append(f"Honeypot: {token.honeypot_probability:.1%}")
                            
                            if security_status:
                                f.write("   üõ°Ô∏è  –°—Ç–∞—Ç—É—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
                                for item in security_status:
                                    f.write(f"     - {item}\n")
                                # –î–µ—Ç–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
                                if hasattr(token, 'liquidity_lock_info') and token.liquidity_lock_info:
                                    lock_info = token.liquidity_lock_info
                                    if getattr(lock_info, 'is_locked', False):
                                        unlock_str = ''
                                        try:
                                            if getattr(lock_info, 'unlock_date', None):
                                                unlock_str = f", –¥–æ {lock_info.unlock_date.strftime('%Y-%m-%d')}"
                                        except Exception:
                                            pass
                                        f.write(
                                            f"   üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {lock_info.locked_percentage:.1f}% –Ω–∞ {lock_info.lock_duration_days} –¥–Ω–µ–π ({lock_info.platform}{unlock_str})\n"
                                        )
                                        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–∑–∞–º–µ—Ç–∫–∏ –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                        try:
                                            warnings_list = getattr(lock_info, 'warnings', []) or []
                                            if warnings_list:
                                                f.write("   üîé –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:\n")
                                                for w in warnings_list[:3]:
                                                    f.write(f"      ‚Ä¢ {w}\n")
                                        except Exception:
                                            pass
                            
                            # –ë–ª–æ–∫ 1inch —É–¥–∞–ª–µ–Ω
                        
                        # –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                        if hasattr(token, 'security_issues') and token.security_issues:
                            f.write(f"   üö® –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
                            for issue in token.security_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                f.write(f"      ‚Ä¢ {issue}\n")
                        
                        # –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
                        if token.risk_factors:
                            f.write(f"   ‚ö†Ô∏è  –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:\n")
                            for factor in token.risk_factors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                f.write(f"      ‚Ä¢ {factor}\n")
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–æ)
                        try:
                            recommendations = self.get_security_recommendations(token)
                        except Exception:
                            recommendations = []
                        if recommendations:
                            f.write(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
                            for rec in recommendations[:3]:
                                f.write(f"      ‚Ä¢ {rec}\n")
                        
                        # –°–∞–π—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                        websites = token.info.get("websites", [])
                        socials = token.info.get("socials", [])
                        
                        if websites or socials:
                            f.write(f"   üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n")
                            if websites:
                                for website in websites[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                                    if isinstance(website, dict):
                                        url = website.get('url', '')
                                        f.write(f"      ‚Ä¢ –°–∞–π—Ç: {url}\n")
                                    else:
                                        f.write(f"      ‚Ä¢ –°–∞–π—Ç: {website}\n")
                            
                            if socials:
                                for social in socials[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                                    if isinstance(social, dict):
                                        url = social.get('url', '')
                                        f.write(f"      ‚Ä¢ –°–æ—Ü—Å–µ—Ç—å: {url}\n")
                                    else:
                                        f.write(f"      ‚Ä¢ –°–æ—Ü—Å–µ—Ç—å: {social}\n")
                        
                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
                        try:
                            external_checks = getattr(token, 'security_report', {}).external_checks if hasattr(token, 'security_report') and token.security_report else {}
                        except Exception:
                            external_checks = {}
                        utc = (external_checks or {}).get('universal_checks') or {}
                        if utc:
                            srcs = utc.get('sources', [])
                            trust = utc.get('trust_level')
                            f.write("   üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n")
                            if srcs:
                                f.write(f"      ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(srcs)}\n")
                            if trust:
                                f.write(f"      ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {trust}\n")
                            cg = utc.get('coingecko') or {}
                            if cg.get('found'):
                                f.write(f"      ‚Ä¢ CoinGecko: {cg.get('name','')} ({cg.get('symbol','')})\n")
                            uni = utc.get('uniswap') or {}
                            if uni.get('found'):
                                tvl = ((uni.get('info') or {}).get('totalValueLockedUSD'))
                                if tvl is not None:
                                    f.write(f"      ‚Ä¢ Uniswap v3: TVL ${float(tvl):,.0f}\n")
                            jup = utc.get('jupiter') or {}
                            if jup.get('found'):
                                f.write("      ‚Ä¢ Jupiter (Solana): –Ω–∞–π–¥–µ–Ω/strict\n")

                        # –°—Å—ã–ª–∫–∏
                        f.write(f"   üîó –°—Å—ã–ª–∫–∏:\n")
                        f.write(f"      ‚Ä¢ DexScreener: {token.get_dexscreener_url()}\n")
                        f.write(f"      ‚Ä¢ Explorer: {token.get_explorer_url()}\n")
                        f.write(f"      ‚Ä¢ DEX: {token.get_dex_url()}\n")
                        
                        f.write("\n")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                f.write("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n")
                f.write("=" * 100 + "\n")
                f.write("üîç –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ:\n")
                f.write("   ‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n")
                f.write("   ‚Ä¢ –†–µ–Ω–æ–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ multisig/timelock\n")
                f.write("   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫\n")
                f.write("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ honeypot –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n")
                f.write("   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º–∏\n")
                # –†–∞–Ω–µ–µ –∑–¥–µ—Å—å –≤—ã–≤–æ–¥–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –≤ 1inch ‚Äî —É–¥–∞–ª–µ–Ω–æ
                
                f.write("‚ö†Ô∏è  –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å:\n")
                f.write("   ‚Ä¢ –ê–Ω–æ–º–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º —Ü–µ–Ω—ã (>200%) –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥\n")
                f.write("   ‚Ä¢ –í—ã—Å–æ–∫–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –æ–±—ä–µ–º–∞ –∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (>50)\n")
                f.write("   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–∞–π—Ç–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n")
                f.write("   ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç–æ–º < 24 —á–∞—Å–æ–≤\n")
                f.write("   ‚Ä¢ –ù–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é (<$25,000)\n")
                
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False